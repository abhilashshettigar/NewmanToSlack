{
	"info": {
		"_postman_id": "17d2143a-e2da-41a8-babe-d0ac5705f2ab",
		"name": "RentalQ Testcases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Tenant",
					"item": [
						{
							"name": "Register",
							"item": [
								{
									"name": "If registration is successful",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fee66140-21a1-42f2-a6af-ce263943abe2",
												"exec": [
													"pm.test(\"Status code is 200 or OK\", function () ",
													"{",
													"    pm.response.to.have.status(200)||pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"tenant_token\", jsonData.token);",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.registration);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Origin",
												"value": "file://",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "{{email}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "password_confirmation",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "Janu",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "Bhuva",
													"type": "text"
												},
												{
													"key": "terms",
													"value": "1",
													"type": "text"
												},
												{
													"key": "pm",
													"value": "0",
													"type": "text"
												},
												{
													"key": "phone",
													"value": "0631478545",
													"type": "text"
												},
												{
													"key": "age",
													"value": "23",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/register",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "If email is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c38dc331-175a-4c35-928a-8a8f4a70e009",
												"exec": [
													"pm.test(\"Status code is 400 or Bad Request\", function () ",
													"{",
													"    pm.response.to.have.status(400)||pm.response.to.have.status(\"Bad Request\");",
													"});",
													"",
													"pm.test(\"Error status code : 400\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"});",
													"",
													"pm.test(\"Error message : Error\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"Error\");",
													"});",
													"",
													"pm.test(\"Error message : The email must be a valid email address.\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.email[0]).to.eql(\"The email must be a valid email address.\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.invalid_email);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "janvi@gmail",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "password_confirmation",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "Janvi",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "Bhuva",
													"type": "text"
												},
												{
													"key": "terms",
													"value": "1",
													"type": "text"
												},
												{
													"key": "pm",
													"value": "0",
													"type": "text"
												},
												{
													"key": "phone",
													"value": "0631478545",
													"type": "text"
												},
												{
													"key": "age",
													"value": "26",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/register",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "If user enter blank email address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c38dc331-175a-4c35-928a-8a8f4a70e009",
												"exec": [
													"pm.test(\"Status code is 400 or Bad Request\", function () ",
													"{",
													"    pm.response.to.have.status(400)||pm.response.to.have.status(\"Bad Request\");",
													"});",
													"",
													"pm.test(\"Error status code : 400\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"});",
													"",
													"pm.test(\"Error message : Error\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"Error\");",
													"});",
													"",
													"pm.test(\"Error message : The email field is required.\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.email[0]).to.eql(\"The email field is required.\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.invalid_email);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "password_confirmation",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "Janvi",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "Bhuva",
													"type": "text"
												},
												{
													"key": "terms",
													"value": "1",
													"type": "text"
												},
												{
													"key": "pm",
													"value": "0",
													"type": "text"
												},
												{
													"key": "phone",
													"value": "0631478545",
													"type": "text"
												},
												{
													"key": "age",
													"value": "26",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/register",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "If user register with existing email address",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be61d05c-9abc-4779-a04f-af3e118259e7",
												"exec": [
													"pm.test(\"Status code is 400 or Bad Request\", function () ",
													"{",
													"    pm.response.to.have.status(400)||pm.response.to.have.status(\"Bad Request\");",
													"});",
													"",
													"pm.test(\"Error status code : 400\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"});",
													"",
													"pm.test(\"Error message : This email has already linked to an account.\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"This email has already linked to an account.\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.existing_email);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});",
													"",
													"    pm.test(\"JSON data is empty\", function () {",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "janvibhuva337@gmail.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "Janvi",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "Bhuva",
													"type": "text"
												},
												{
													"key": "password_confirmation",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "terms",
													"value": "1",
													"type": "text"
												},
												{
													"key": "pm",
													"value": "0",
													"type": "text"
												},
												{
													"key": "phone",
													"value": "0631478545",
													"type": "text"
												},
												{
													"key": "age",
													"value": "26",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/register",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "If password does not match the confirm password",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5334a85-fb88-4e80-b43d-1ed747be6ed8",
												"exec": [
													"pm.test(\"Status code is 400 or Bad Request\", function () ",
													"{",
													"    pm.response.to.have.status(400)||pm.response.to.have.status(\"Bad Request\");",
													"});",
													"",
													"pm.test(\"Error status code : 400\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"});",
													"",
													"pm.test(\"Error message : Error\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"Error\");",
													"});",
													"",
													"pm.test(\"Error message : The password confirmation does not match.\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.password[0]).to.eql(\"The password confirmation does not match.\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.password_unmatch);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "{{email}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "password_confirmation",
													"value": "Temp12",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "Janvi",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "Bhuva",
													"type": "text"
												},
												{
													"key": "terms",
													"value": "1",
													"type": "text"
												},
												{
													"key": "pm",
													"value": "0",
													"type": "text"
												},
												{
													"key": "phone",
													"value": "0631478545",
													"type": "text"
												},
												{
													"key": "age",
													"value": "26",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/register",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "If user does not enter password",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be61d05c-9abc-4779-a04f-af3e118259e7",
												"exec": [
													"pm.test(\"Status code is 400 or Bad Request\", function () ",
													"{",
													"    pm.response.to.have.status(400)||pm.response.to.have.status(\"Bad Request\");",
													"});",
													"",
													"pm.test(\"Error status code : 400\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"});",
													"",
													"pm.test(\"Error message : Error\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"Error\");",
													"});",
													"",
													"pm.test(\"Error message : The password field is required.\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.password[0]).to.eql(\"The password field is required.\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.password_unmatch);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "{{email}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "Janvi",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "Bhuva",
													"type": "text"
												},
												{
													"key": "password_confirmation",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "terms",
													"value": "1",
													"type": "text"
												},
												{
													"key": "pm",
													"value": "0",
													"type": "text"
												},
												{
													"key": "phone",
													"value": "0631478545",
													"type": "text"
												},
												{
													"key": "age",
													"value": "26",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/register",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "If user does not enter firstname and lastname",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be61d05c-9abc-4779-a04f-af3e118259e7",
												"exec": [
													"pm.test(\"Status code is 400 or Bad Request\", function () ",
													"{",
													"    pm.response.to.have.status(400)||pm.response.to.have.status(\"Bad Request\");",
													"});",
													"",
													"pm.test(\"Error status code : 400\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"});",
													"",
													"pm.test(\"Error message : Error\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"Error\");",
													"});",
													"",
													"pm.test(\"Error message : The first name field is required.\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.first_name[0]).to.eql(\"The first name field is required.\");",
													"});",
													"",
													"pm.test(\"Error message : The last name field is required.\", function ()",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.last_name[0]).to.eql(\"The last name field is required.\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.missing_name);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "{{email}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "",
													"type": "text"
												},
												{
													"key": "password_confirmation",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "terms",
													"value": "1",
													"type": "text"
												},
												{
													"key": "pm",
													"value": "0",
													"type": "text"
												},
												{
													"key": "phone",
													"value": "0631478545",
													"type": "text"
												},
												{
													"key": "age",
													"value": "26",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/register",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "If user is not accepting terms",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c38dc331-175a-4c35-928a-8a8f4a70e009",
												"exec": [
													"pm.test(\"Status code is 400 or Bad Request\", function () ",
													"{",
													"    pm.response.to.have.status(400)||pm.response.to.have.status(\"Bad Request\");",
													"});",
													"",
													"pm.test(\"Error status code : 400\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"});",
													"",
													"pm.test(\"Error message : Error\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"Error\");",
													"});",
													"",
													"pm.test(\"Error message : The terms must be accepted.\", function ()",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.terms[0]).to.eql(\"The terms must be accepted.\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.terms_not_accepted);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "{{email}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "password_confirmation",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "Janvi",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "Bhuva",
													"type": "text"
												},
												{
													"key": "terms",
													"value": "0",
													"type": "text"
												},
												{
													"key": "pm",
													"value": "0",
													"type": "text"
												},
												{
													"key": "phone",
													"value": "0631478545",
													"type": "text"
												},
												{
													"key": "age",
													"value": "26",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/register",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "If user is not entering phone number",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c38dc331-175a-4c35-928a-8a8f4a70e009",
												"exec": [
													"pm.test(\"Status code is 400 or Bad Request\", function () ",
													"{",
													"    pm.response.to.have.status(400)||pm.response.to.have.status(\"Bad Request\");",
													"});",
													"",
													"pm.test(\"Error status code : 400\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"});",
													"",
													"pm.test(\"Error message : Error\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"Error\");",
													"});",
													"",
													"pm.test(\"Error message : The phone field is required.\", function ()",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.phone[0]).to.eql(\"The phone field is required.\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {",
													"    var schema = JSON.parse(environment.missing_phone_number);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "{{email}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "password_confirmation",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "Janvi",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "Bhuva",
													"type": "text"
												},
												{
													"key": "terms",
													"value": "1",
													"type": "text"
												},
												{
													"key": "pm",
													"value": "0",
													"type": "text"
												},
												{
													"key": "phone",
													"value": "",
													"type": "text"
												},
												{
													"key": "age",
													"value": "26",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/register",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "If user is not entering invalid phone number",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c38dc331-175a-4c35-928a-8a8f4a70e009",
												"exec": [
													"pm.test(\"Status code is 400 or Bad Request\", function () ",
													"{",
													"    pm.response.to.have.status(400)||pm.response.to.have.status(\"Bad Request\");",
													"});",
													"",
													"pm.test(\"Error status code : 400\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"});",
													"",
													"pm.test(\"Error message : Error\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"Error\");",
													"});",
													"",
													"pm.test(\"Error message : The provided phone number must be the full number, with area codes and no spaces.\", function ()",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.phone[0]).to.eql(\"The provided phone number must be the full number, with area codes and no spaces.\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {",
													"    var schema = JSON.parse(environment.missing_phone_number);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "{{email}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "password_confirmation",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "first_name",
													"value": "Janvi",
													"type": "text"
												},
												{
													"key": "last_name",
													"value": "Bhuva",
													"type": "text"
												},
												{
													"key": "terms",
													"value": "1",
													"type": "text"
												},
												{
													"key": "pm",
													"value": "0",
													"type": "text"
												},
												{
													"key": "phone",
													"value": "68765432",
													"type": "text"
												},
												{
													"key": "age",
													"value": "26",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/register",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"register"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Forgot password",
							"item": [
								{
									"name": "If forgot password link sent successfully",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2de641b1-3eae-4d31-be0d-5514c2300c20",
												"exec": [
													"pm.test(\"Status code is 200 or OK\", function () ",
													"{",
													"    pm.response.to.have.status(200)||pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Success status code : 200\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"200\");",
													"});",
													"",
													"pm.test(\"Success message : Reset password email sent successfully.\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"Reset password email sent successfully.\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.existing_email);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});",
													"",
													"    pm.test(\"JSON data is empty\", function () {",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "file://",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "janvibhuva337@gmail.com",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/forgotPassword",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"forgotPassword"
											]
										}
									},
									"response": []
								},
								{
									"name": "If tenant enters email of social login",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2de641b1-3eae-4d31-be0d-5514c2300c20",
												"exec": [
													"pm.test(\"Status code is 403 or Forbidden\", function () ",
													"{",
													"    pm.response.to.have.status(403)||pm.response.to.have.status(\"Forbidden\");",
													"});",
													"",
													"pm.test(\"Error status code : 403\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"403\");",
													"});",
													"",
													"pm.test(\"Error message : Please try the social login\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"Please try the social login\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.existing_email);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});",
													"",
													"    pm.test(\"JSON data is empty\", function () {",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Origin",
												"type": "text",
												"value": "file://"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "demo_hssepkj_user@tfbnw.net",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/forgotPassword",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"forgotPassword"
											]
										}
									},
									"response": []
								},
								{
									"name": "If user is not entering email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2de641b1-3eae-4d31-be0d-5514c2300c20",
												"exec": [
													"pm.test(\"Status code is 400 or Bad Request\", function () ",
													"{",
													"    pm.response.to.have.status(400)||pm.response.to.have.status(\"Bad Request\");",
													"});",
													"",
													"pm.test(\"Error status code : 400\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"});",
													"",
													"pm.test(\"Error message : Error\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"Error\");",
													"});",
													"",
													"pm.test(\"Error message : The email field is required.\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.email[0]).to.eql(\"The email field is required.\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.invalid_email);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Origin",
												"type": "text",
												"value": "{{origin}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/forgotPassword",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"forgotPassword"
											]
										}
									},
									"response": []
								},
								{
									"name": "If user is entering email which is not registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2de641b1-3eae-4d31-be0d-5514c2300c20",
												"exec": [
													"pm.test(\"Status code is 400 or Bad Request\", function () ",
													"{",
													"    pm.response.to.have.status(400)||pm.response.to.have.status(\"Bad Request\");",
													"});",
													"",
													"pm.test(\"Error status code : 400\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"});",
													"",
													"pm.test(\"Message : Email address not present in the system. Please enter a valid email address.\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"Email address not present in the system. Please enter a valid email address.\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.existing_email);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});",
													"",
													"    pm.test(\"JSON data is empty\", function () {",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Origin",
												"type": "text",
												"value": "{{origin}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "janvibhu@gmail.com",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/forgotPassword",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"forgotPassword"
											]
										}
									},
									"response": []
								},
								{
									"name": "If user enter invalid email",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2de641b1-3eae-4d31-be0d-5514c2300c20",
												"exec": [
													"pm.test(\"Status code is 400 or Bad Request\", function () ",
													"{",
													"    pm.response.to.have.status(400)||pm.response.to.have.status(\"Bad Request\");",
													"});",
													"",
													"pm.test(\"Error status code : 400\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"});",
													"",
													"pm.test(\"Error message : Error\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"Error\");",
													"});",
													"",
													"pm.test(\"Error message : The email must be a valid email address.\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.email[0]).to.eql(\"The email must be a valid email address.\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.invalid_email);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Origin",
												"value": "{{origin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "email",
													"value": "janvibthirdrocktechkno.com",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/forgotPassword",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"forgotPassword"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Change Password",
							"item": [
								{
									"name": "If user changed password successfully",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ff4c805-8645-4528-8e5d-0d18bdfbf3da",
												"exec": [
													"pm.test(\"Status code is 200 or OK\", function () ",
													"{",
													"    pm.response.to.have.status(200)||pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Status code : 200\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"200\");",
													"});",
													"",
													"pm.test(\"Success message : Password changed successfully.\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"Password changed successfully.\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.existing_email);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});",
													"",
													"    pm.test(\"JSON data is empty\", function () {",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "token",
													"value": "b5c2ddd92aaeee5198eeaa95af0bc63bae9528d8109e47104625e9c5311dd433",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123456",
													"type": "text"
												},
												{
													"key": "email",
													"value": "janvibhuva337@gmail.com",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/changePassword",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"changePassword"
											]
										}
									},
									"response": []
								},
								{
									"name": "If user is not entering email and password",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ff4c805-8645-4528-8e5d-0d18bdfbf3da",
												"exec": [
													"pm.test(\"Status code is 400 or Bad Request\", function () ",
													"{",
													"    pm.response.to.have.status(400)||pm.response.to.have.status(\"Bad Request\");",
													"});",
													"",
													"pm.test(\"Status code : 400\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"});",
													"",
													"pm.test(\"Error message : Error\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"Error\");",
													"});",
													"",
													"pm.test(\"Error message : The email field is required.\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.email[0]).to.eql(\"The email field is required.\");",
													"});",
													"",
													"pm.test(\"Error message : The password field is required.\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.password[0]).to.eql(\"The password field is required.\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.missing_email_password);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "token",
													"value": "fdfe65fecf6019381873ce290eb88ac620738d8ed7aed262aae7bf1f8c645061",
													"type": "text"
												},
												{
													"key": "password",
													"value": "",
													"type": "text"
												},
												{
													"key": "email",
													"value": "",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/changePassword",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"changePassword"
											]
										}
									},
									"response": []
								},
								{
									"name": "if user is not entering 6 characters long password",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ff4c805-8645-4528-8e5d-0d18bdfbf3da",
												"exec": [
													"pm.test(\"Status code is 400 or Bad Request\", function () ",
													"{",
													"    pm.response.to.have.status(400)||pm.response.to.have.status(\"Bad Request\");",
													"});",
													"",
													"pm.test(\"Status code : 400\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"400\");",
													"});",
													"",
													"pm.test(\"Error message : Error\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"Error\");",
													"});",
													"",
													"pm.test(\"Error message : The password must be at least 6 characters.\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data.password[0]).to.eql(\"The password must be at least 6 characters.\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.password_unmatch);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "token",
													"value": "fdfe65fecf6019381873ce290eb88ac620738d8ed7aed262aae7bf1f8c645061",
													"type": "text"
												},
												{
													"key": "password",
													"value": "12345",
													"type": "text"
												},
												{
													"key": "email",
													"value": "janvibhuva337@gmail.com",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/changePassword",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"changePassword"
											]
										}
									},
									"response": []
								},
								{
									"name": "If change password link expires",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0048b07c-4119-48df-a971-ce64fa129345",
												"exec": [
													"pm.test(\"Status code is 200 or OK\", function () ",
													"{",
													"    pm.response.to.have.status(200)||pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Status code : 200\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"200\");",
													"});",
													"",
													"pm.test(\"Error message : Opps Your link is expired.\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"Opps Your link is expired.\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.existing_email);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});",
													"",
													"    pm.test(\"JSON data is empty\", function () {",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "token",
													"value": "fc986926e36eee616c04647abb8b2d0b5970b411bab67e513067ae915074614c",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "email",
													"value": "janvibhuva337@gmail.com",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/changePassword",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"changePassword"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c481ecbb-266b-4f35-931f-e8bf20b40f93",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c2fa1a9c-9d48-48c2-962a-563b46e60c23",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Login",
							"item": [
								{
									"name": "FB login",
									"item": [
										{
											"name": "FB login",
											"item": [
												{
													"name": "FB login",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "65ce7e38-83ac-4437-be12-732fb7eed49e",
																"exec": [
																	"pm.test(\"Status code is 200 or OK\", function () ",
																	"{",
																	"    pm.response.to.have.status(200)||pm.response.to.have.status(\"OK\");",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"pm.environment.set(\"FB_tenant_token\", jsonData.token);",
																	"",
																	"    pm.test(\"JSON schema validation\", function() {    ",
																	"    var schema = JSON.parse(environment.registration);",
																	"    var jsonData = JSON.parse(responseBody);",
																	"    var result = tv4.validate(jsonData, schema, false, true);",
																	"    if (result !== true) {",
																	"        console.log('Schema validation failed:', tv4.error);",
																	"        console.log(tv4.error.dataPath);",
																	"    }",
																	"    pm.expect(result).to.be.true;",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{dev}}/v1/fbLogin?social_id=112464623220848&first_name=tapan&last_name=patel&email=demo_hssepkj_user@tfbnw.net&image_url=https://scontent.xx.fbcdn.net/v/t1.0-9/15327427_585435148333529_xxxxxxxxxxxx_n.jpg?oh=xxxxxxxx%26oe=xxxxxxxxx&phone=0918384784",
															"host": [
																"{{dev}}"
															],
															"path": [
																"v1",
																"fbLogin"
															],
															"query": [
																{
																	"key": "social_id",
																	"value": "112464623220848",
																	"description": "108779770265146"
																},
																{
																	"key": "first_name",
																	"value": "tapan"
																},
																{
																	"key": "last_name",
																	"value": "patel"
																},
																{
																	"key": "email",
																	"value": "demo_hssepkj_user@tfbnw.net",
																	"description": "demo_hssepkj_user@tfbnw.net"
																},
																{
																	"key": "image_url",
																	"value": "https://scontent.xx.fbcdn.net/v/t1.0-9/15327427_585435148333529_xxxxxxxxxxxx_n.jpg?oh=xxxxxxxx%26oe=xxxxxxxxx",
																	"description": "https://platform-lookaside.fbsbx.com/platform/profilepic/?asid=112464623220848%26height=50%26width=50%26ext=1552828135%26hash=AeQfpsMYS3MTfX4L"
																},
																{
																	"key": "phone",
																	"value": "0918384784"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "If tenant enters the email that is manually registered (not social signup)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "65ce7e38-83ac-4437-be12-732fb7eed49e",
																"exec": [
																	"pm.test(\"Status code is 400 or Bad Request\", function () ",
																	"{",
																	"    pm.response.to.have.status(400)||pm.response.to.have.status(\"Bad Request\");",
																	"});",
																	"",
																	"pm.test(\"Error status code : 400\", function () ",
																	"{",
																	"    var jsonData = pm.response.json();",
																	"    pm.expect(jsonData.status).to.eql(\"400\");",
																	"});",
																	"",
																	"pm.test(\"Error message : You are already registered with this email id, please try normal login\", function () ",
																	"{",
																	"    var jsonData = pm.response.json();",
																	"    pm.expect(jsonData.messages).to.eql(\"You are already registered with this email id, please try normal login\");",
																	"});",
																	"",
																	"    pm.test(\"JSON schema validation\", function() {    ",
																	"    var schema = JSON.parse(environment.existing_email);",
																	"    var jsonData = JSON.parse(responseBody);",
																	"    var result = tv4.validate(jsonData, schema, false, true);",
																	"    if (result !== true) {",
																	"        console.log('Schema validation failed:', tv4.error);",
																	"        console.log(tv4.error.dataPath);",
																	"    }",
																	"    pm.expect(result).to.be.true;",
																	"});",
																	"",
																	"    pm.test(\"JSON data is empty\", function () {",
																	"    var jsonData = JSON.parse(responseBody);",
																	"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{dev}}/v1/fbLogin?social_id=112464623220848&first_name=Janvi&last_name=Bhuva&email=janvibhuva337@gmail.com&image_url=https://platform-lookaside.fbsbx.com/platform/profilepic/?asid=112464623220848%26height=50%26width=50%26ext=1552828135%26hash=AeQfpsMYS3MTfX4L&phone=0918384784",
															"host": [
																"{{dev}}"
															],
															"path": [
																"v1",
																"fbLogin"
															],
															"query": [
																{
																	"key": "social_id",
																	"value": "112464623220848"
																},
																{
																	"key": "first_name",
																	"value": "Janvi"
																},
																{
																	"key": "last_name",
																	"value": "Bhuva"
																},
																{
																	"key": "email",
																	"value": "janvibhuva337@gmail.com",
																	"description": "demo_hssepkj_user@tfbnw.net"
																},
																{
																	"key": "image_url",
																	"value": "https://platform-lookaside.fbsbx.com/platform/profilepic/?asid=112464623220848%26height=50%26width=50%26ext=1552828135%26hash=AeQfpsMYS3MTfX4L",
																	"description": "https://platform-lookaside.fbsbx.com/platform/profilepic/?asid=112464623220848%26height=50%26width=50%26ext=1552828135%26hash=AeQfpsMYS3MTfX4L"
																},
																{
																	"key": "phone",
																	"value": "0918384784"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "If tenant enters invalid phone number",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "65ce7e38-83ac-4437-be12-732fb7eed49e",
																"exec": [
																	"pm.test(\"Status code is 400 or Bad Request\", function () ",
																	"{",
																	"    pm.response.to.have.status(400)||pm.response.to.have.status(\"Bad Request\");",
																	"});",
																	"",
																	"pm.test(\"Error status : 400\", function () ",
																	"{",
																	"    var jsonData = pm.response.json();",
																	"    pm.expect(jsonData.status).to.eql(\"400\");",
																	"});",
																	"",
																	"pm.test(\"Error message : The last name field is required.\", function () ",
																	"{",
																	"    var jsonData = pm.response.json();",
																	"    pm.expect(jsonData.data.phone[0]).to.eql(\"The provided phone number must be the full number, with area codes and no spaces.\");",
																	"});",
																	"",
																	"    pm.test(\"JSON schema validation\", function() {",
																	"    var schema = JSON.parse(environment.missing_phone_number);",
																	"    var jsonData = JSON.parse(responseBody);",
																	"    var result = tv4.validate(jsonData, schema, false, true);",
																	"    if (result !== true) {",
																	"        console.log('Schema validation failed:', tv4.error);",
																	"        console.log(tv4.error.dataPath);",
																	"    }",
																	"    pm.expect(result).to.be.true;",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{dev}}/v1/fbLogin?social_id=112464623220848&first_name=Janvi&last_name=Bhuva&email=demo_hssepkj_user@tfbnw.net&image_url=https://platform-lookaside.fbsbx.com/platform/profilepic/?asid=112464623220848%26height=50%26width=50%26ext=1552828135%26hash=AeQfpsMYS3MTfX4L&phone=9373673836",
															"host": [
																"{{dev}}"
															],
															"path": [
																"v1",
																"fbLogin"
															],
															"query": [
																{
																	"key": "social_id",
																	"value": "112464623220848"
																},
																{
																	"key": "first_name",
																	"value": "Janvi"
																},
																{
																	"key": "last_name",
																	"value": "Bhuva"
																},
																{
																	"key": "email",
																	"value": "demo_hssepkj_user@tfbnw.net",
																	"description": "demo_hssepkj_user@tfbnw.net"
																},
																{
																	"key": "image_url",
																	"value": "https://platform-lookaside.fbsbx.com/platform/profilepic/?asid=112464623220848%26height=50%26width=50%26ext=1552828135%26hash=AeQfpsMYS3MTfX4L",
																	"description": "https://platform-lookaside.fbsbx.com/platform/profilepic/?asid=112464623220848%26height=50%26width=50%26ext=1552828135%26hash=AeQfpsMYS3MTfX4L"
																},
																{
																	"key": "phone",
																	"value": "9373673836"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "If tenant does not enter email on first time signup",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "65ce7e38-83ac-4437-be12-732fb7eed49e",
																"exec": [
																	"pm.test(\"Status code is 400 or Bad Request\", function () ",
																	"{",
																	"    pm.response.to.have.status(400)||pm.response.to.have.status(\"Bad Request\");",
																	"});",
																	"",
																	"pm.test(\"Error status : 400\", function () ",
																	"{",
																	"    var jsonData = pm.response.json();",
																	"    pm.expect(jsonData.status).to.eql(\"400\");",
																	"});",
																	"",
																	"pm.test(\"Error message : Error\", function () ",
																	"{",
																	"    var jsonData = pm.response.json();",
																	"    pm.expect(jsonData.messages).to.eql(\"Error\");",
																	"});",
																	"",
																	"pm.test(\"Error message : The email field is required.\", function () ",
																	"{",
																	"    var jsonData = pm.response.json();",
																	"    pm.expect(jsonData.data.email[0]).to.eql(\"The email field is required.\");",
																	"});",
																	"",
																	"    pm.test(\"JSON schema validation\", function() {    ",
																	"    var schema = JSON.parse(environment.invalid_email);",
																	"    var jsonData = JSON.parse(responseBody);",
																	"    var result = tv4.validate(jsonData, schema, false, true);",
																	"    if (result !== true) {",
																	"        console.log('Schema validation failed:', tv4.error);",
																	"        console.log(tv4.error.dataPath);",
																	"    }",
																	"    pm.expect(result).to.be.true;",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{dev}}/v1/fbLogin?social_id=112464623220849&first_name=Janvi&last_name=Bhuva&email=&image_url=https://platform-lookaside.fbsbx.com/platform/profilepic/?asid=112464623220848%26height=50%26width=50%26ext=1552828135%26hash=AeQfpsMYS3MTfX4L&phone=",
															"host": [
																"{{dev}}"
															],
															"path": [
																"v1",
																"fbLogin"
															],
															"query": [
																{
																	"key": "social_id",
																	"value": "112464623220849",
																	"description": "112464623220848"
																},
																{
																	"key": "first_name",
																	"value": "Janvi"
																},
																{
																	"key": "last_name",
																	"value": "Bhuva"
																},
																{
																	"key": "email",
																	"value": "",
																	"description": "demo_hssepkj_user@tfbnw.net"
																},
																{
																	"key": "image_url",
																	"value": "https://platform-lookaside.fbsbx.com/platform/profilepic/?asid=112464623220848%26height=50%26width=50%26ext=1552828135%26hash=AeQfpsMYS3MTfX4L",
																	"description": "https://platform-lookaside.fbsbx.com/platform/profilepic/?asid=112464623220848%26height=50%26width=50%26ext=1552828135%26hash=AeQfpsMYS3MTfX4L"
																},
																{
																	"key": "phone",
																	"value": ""
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "If tenant does not enter required field after registration",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "65ce7e38-83ac-4437-be12-732fb7eed49e",
																"exec": [
																	"pm.test(\"Status code is 400 or Bad Request\", function () ",
																	"{",
																	"    pm.response.to.have.status(400)||pm.response.to.have.status(\"Bad Request\");",
																	"});",
																	"",
																	"pm.test(\"Error status : 400\", function () ",
																	"{",
																	"    var jsonData = pm.response.json();",
																	"    pm.expect(jsonData.status).to.eql(\"400\");",
																	"});",
																	"",
																	"pm.test(\"Error message : The social id field is required.\", function () ",
																	"{",
																	"    var jsonData = pm.response.json();",
																	"    pm.expect(jsonData.data.social_id[0]).to.eql(\"The social id field is required.\");",
																	"});",
																	"",
																	"pm.test(\"Error message : The first name field is required.\", function () ",
																	"{",
																	"    var jsonData = pm.response.json();",
																	"    pm.expect(jsonData.data.first_name[0]).to.eql(\"The first name field is required.\");",
																	"});",
																	"",
																	"pm.test(\"Error message : The last name field is required.\", function () ",
																	"{",
																	"    var jsonData = pm.response.json();",
																	"    pm.expect(jsonData.data.last_name[0]).to.eql(\"The last name field is required.\");",
																	"});",
																	"",
																	"pm.test(\"Error message : The image url field is required.\", function () ",
																	"{",
																	"    var jsonData = pm.response.json();",
																	"    pm.expect(jsonData.data.image_url[0]).to.eql(\"The image url field is required.\");",
																	"});",
																	"",
																	"    pm.test(\"JSON schema validation\", function() {    ",
																	"    var schema = JSON.parse(environment.missing_fields_FB_login);",
																	"    var jsonData = JSON.parse(responseBody);",
																	"    var result = tv4.validate(jsonData, schema, false, true);",
																	"    if (result !== true) {",
																	"        console.log('Schema validation failed:', tv4.error);",
																	"        console.log(tv4.error.dataPath);",
																	"    }",
																	"    pm.expect(result).to.be.true;",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{dev}}/v1/fbLogin?social_id=&first_name=&last_name=&email=demo_hssepkj_user@tfbnw.net&image_url=&phone",
															"host": [
																"{{dev}}"
															],
															"path": [
																"v1",
																"fbLogin"
															],
															"query": [
																{
																	"key": "social_id",
																	"value": "",
																	"description": "112464623220848"
																},
																{
																	"key": "first_name",
																	"value": ""
																},
																{
																	"key": "last_name",
																	"value": ""
																},
																{
																	"key": "email",
																	"value": "demo_hssepkj_user@tfbnw.net",
																	"description": "demo_hssepkj_user@tfbnw.net"
																},
																{
																	"key": "image_url",
																	"value": "",
																	"description": "https://platform-lookaside.fbsbx.com/platform/profilepic/?asid=112464623220848%26height=50%26width=50%26ext=1552828135%26hash=AeQfpsMYS3MTfX4L"
																},
																{
																	"key": "phone",
																	"value": null
																}
															]
														}
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Manual login",
									"item": [
										{
											"name": "If login is successful",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6180657b-b45c-46db-8183-11fd99a3f70d",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function () ",
															"{",
															"    pm.response.to.have.status(200)||pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.environment.set(\"tenant_token\", jsonData.token);",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.registration);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "27a852b1-dc56-468c-8d24-f6919aedb7d6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Origin",
														"type": "text",
														"value": "file://"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "email",
															"value": "janvib@yopmail.com",
															"description": "janvib@yopmail.com",
															"type": "text"
														},
														{
															"key": "password",
															"value": "123456",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/login",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "If user does not enter email and password",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "11caaf32-4cf7-4fa3-ac79-d87ae005d3e3",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function () ",
															"{",
															"    pm.response.to.have.status(400)||pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Error status code : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Error message : No account found with this email address. Please try again.\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"No account found with this email address. Please try again.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "email",
															"value": "",
															"type": "text"
														},
														{
															"key": "password",
															"value": "",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/login",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "If user enter invalid email",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "11caaf32-4cf7-4fa3-ac79-d87ae005d3e3",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function () ",
															"{",
															"    pm.response.to.have.status(400)||pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Error status code : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Error message : No account found with this email address. Please try again.\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"No account found with this email address. Please try again.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "email",
															"value": "janvi",
															"type": "text"
														},
														{
															"key": "password",
															"value": "Temp12345",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/login",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"login"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Personal information",
							"item": [
								{
									"name": "Add/Update personal info",
									"item": [
										{
											"name": "Add/Update personal info",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "30851d01-a02d-48f3-be4c-965bfd78eb36",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {\r",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Success status : 200\", function () \r",
															"{\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"200\");\r",
															"});\r",
															"\r",
															"pm.test(\"Success message : Personal Information Updated Successfully.\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.messages).to.be.oneOf([ \"Personal Information Added Successfully.\", \"Personal Information Updated Successfully.\" ]);\r",
															"});\r",
															"\r",
															"    pm.test(\"JSON schema validation\", function() {    \r",
															"    var schema = JSON.parse(environment.edit_personal_info);\r",
															"    var jsonData = JSON.parse(responseBody);\r",
															"    var result = tv4.validate(jsonData, schema, false, true);\r",
															"    if (result !== true) {\r",
															"        console.log('Schema validation failed:', tv4.error);\r",
															"        console.log(tv4.error.dataPath);\r",
															"    }\r",
															"    pm.expect(result).to.be.true;\r",
															"});\r",
															"\r",
															"\tpm.test(\"Personal Information for User\", function () {\r",
															"    var data =(pm.environment.get(\"tenant_id\"));\r",
															"    var jsonData = JSON.parse(responseBody);\r",
															"    if(jsonData.data.length > 0) {\r",
															"    array_tenant_id = [];\r",
															"    for(i=0; i<jsonData.data.length; i++){\r",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));\r",
															"      array_tenant_id.push(jsonData.data[i].user_id);\r",
															"    }\r",
															"    console.log(array_tenant_id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "gender",
															"value": "Female",
															"type": "text"
														},
														{
															"key": "marital_status",
															"value": "Unmarried",
															"type": "text"
														},
														{
															"key": "date_of_birth",
															"value": "1995-09-06",
															"description": "Y-m-d",
															"type": "text"
														},
														{
															"key": "smoking_habits",
															"value": "Non-Smoker",
															"type": "text"
														},
														{
															"key": "bio",
															"value": "As a renter would like to have the description regarding the rental or tenant history which would be concerning to the further inquiry. Rest of the details are in the sections for more detailed information",
															"type": "text"
														},
														{
															"key": "first_name",
															"value": "Janu",
															"type": "text"
														},
														{
															"key": "last_name",
															"value": "Bipin",
															"type": "text"
														},
														{
															"key": "phone",
															"value": "+61903326520",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/tenantPersonalInfo",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"tenantPersonalInfo"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add/Update personal info for FB user",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "30851d01-a02d-48f3-be4c-965bfd78eb36",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {\r",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Success status : 200\", function () \r",
															"{\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"200\");\r",
															"});\r",
															"\r",
															"pm.test(\"Success message : Personal Information Updated Successfully.\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.messages).to.be.oneOf([ \"Personal Information Added Successfully.\", \"Personal Information Updated Successfully.\" ]);\r",
															"});\r",
															"\r",
															"    pm.test(\"JSON schema validation\", function() {    \r",
															"    var schema = JSON.parse(environment.edit_personal_info);\r",
															"    var jsonData = JSON.parse(responseBody);\r",
															"    var result = tv4.validate(jsonData, schema, false, true);\r",
															"    if (result !== true) {\r",
															"        console.log('Schema validation failed:', tv4.error);\r",
															"        console.log(tv4.error.dataPath);\r",
															"    }\r",
															"    pm.expect(result).to.be.true;\r",
															"});\r",
															"\r",
															"\tpm.test(\"Personal Information for User\", function () {\r",
															"    var data =(pm.environment.get(\"tenant_id\"));\r",
															"    var jsonData = JSON.parse(responseBody);\r",
															"    if(jsonData.data.length > 0) {\r",
															"    array_tenant_id = [];\r",
															"    for(i=0; i<jsonData.data.length; i++){\r",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));\r",
															"      array_tenant_id.push(jsonData.data[i].user_id);\r",
															"    }\r",
															"    console.log(array_tenant_id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{FB_tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "gender",
															"value": "Male",
															"type": "text"
														},
														{
															"key": "marital_status",
															"value": "Unmarried",
															"type": "text"
														},
														{
															"key": "date_of_birth",
															"value": "1995-09-06",
															"description": "Y-m-d",
															"type": "text"
														},
														{
															"key": "smoking_habits",
															"value": "Non-Smoker",
															"type": "text"
														},
														{
															"key": "bio",
															"value": "As a renter would like to have the description regarding the rental or tenant history which would be concerning to the further inquiry. Rest of the details are in the sections for more detailed information",
															"type": "text"
														},
														{
															"key": "first_name",
															"value": "Tapan",
															"type": "text"
														},
														{
															"key": "last_name",
															"value": "Patel",
															"type": "text"
														},
														{
															"key": "phone",
															"value": "+61903326520",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/tenantPersonalInfo",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"tenantPersonalInfo"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant does not enter required field",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "30851d01-a02d-48f3-be4c-965bfd78eb36",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {\r",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Success status : 400\", function () \r",
															"{\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"400\");\r",
															"});\r",
															"\r",
															"pm.test(\"Error message : The first name field is required.\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.first_name[0]).to.eql(\"The first name field is required.\");\r",
															"});\r",
															"\r",
															"pm.test(\"Error message : The last name field is required.\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.last_name[0]).to.eql(\"The last name field is required.\");\r",
															"});\r",
															"\r",
															"pm.test(\"Error message : The phone field is required.\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.phone[0]).to.eql(\"The phone field is required.\");\r",
															"});\r",
															"\r",
															"pm.test(\"Error message : The date of birth field is required.\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.date_of_birth[0]).to.eql(\"The date of birth field is required.\");\r",
															"});\r",
															"\r",
															"    pm.test(\"JSON schema validation\", function() {    \r",
															"    var schema = JSON.parse(environment.personal_info_missing);\r",
															"    var jsonData = JSON.parse(responseBody);\r",
															"    var result = tv4.validate(jsonData, schema, false, true);\r",
															"    if (result !== true) {\r",
															"        console.log('Schema validation failed:', tv4.error);\r",
															"        console.log(tv4.error.dataPath);\r",
															"    }\r",
															"    pm.expect(result).to.be.true;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "gender",
															"value": "Male",
															"type": "text"
														},
														{
															"key": "marital_status",
															"value": "Unmarried",
															"type": "text"
														},
														{
															"key": "date_of_birth",
															"value": "",
															"description": "Y-m-d",
															"type": "text"
														},
														{
															"key": "smoking_habits",
															"value": "Non-Smoker",
															"type": "text"
														},
														{
															"key": "bio",
															"value": "As a renter would like to have the description regarding the rental or tenant history which would be concerning to the further inquiry. Rest of the details are in the sections for more detailed information",
															"type": "text"
														},
														{
															"key": "first_name",
															"value": "",
															"type": "text"
														},
														{
															"key": "last_name",
															"value": "",
															"type": "text"
														},
														{
															"key": "phone",
															"value": "",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/tenantPersonalInfo",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"tenantPersonalInfo"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Get personal info",
									"item": [
										{
											"name": "Get personal info",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2198ccec-2eff-4d4b-a9c9-fbae37fee445",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Success\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Success\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.environment.set(\"tenant_id\", jsonData.data.user_id);",
															"",
															"var jsonData = pm.response.json();",
															"pm.environment.set(\"tenant_email\", jsonData.data.email);",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.get_personal_info);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													},
													{
														"key": "Origin",
														"type": "text",
														"value": "file://"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{dev}}/v1/tenantPersonalInfo",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"tenantPersonalInfo"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get personal info for FB user",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2198ccec-2eff-4d4b-a9c9-fbae37fee445",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Success\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Success\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.environment.set(\"FB_tenant_id\", jsonData.data.user_id);",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.get_personal_info);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{FB_tenant_token}}"
													},
													{
														"key": "Origin",
														"type": "text",
														"value": "file://"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{dev}}/v1/tenantPersonalInfo",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"tenantPersonalInfo"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Upload profile image",
									"item": [
										{
											"name": "Upload profile image",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "af2c58dc-f3fa-4d75-9dd0-432a0c7e0065",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Profile Image Uploaded Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Profile Image Uploaded Successfully.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.upload_profile);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Upload Profile Image for the user\", function() {",
															"    var data =(pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"    if(jsonData.data.length > 0) {",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));",
															"      array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													},
													{
														"key": "Origin",
														"value": "file://",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "profile_image",
															"type": "file",
															"src": "./tests/qa.png"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/tenantPersonalInfo/uploadProfileImage",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"tenantPersonalInfo",
														"uploadProfileImage"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant does not upload profile image",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "af2c58dc-f3fa-4d75-9dd0-432a0c7e0065",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Profile Image Removed Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Profile Image Removed Successfully.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.remove_profile);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"The Profile upload for the user\", function() {",
															"    \tvar data =(pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"    if(jsonData.data.length > 0) {",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));",
															"      array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													},
													{
														"key": "Origin",
														"type": "text",
														"value": "file://"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "profile_image",
															"type": "file",
															"src": ""
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/tenantPersonalInfo/uploadProfileImage",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"tenantPersonalInfo",
														"uploadProfileImage"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Reset password after login",
							"item": [
								{
									"name": "Reset Password after login",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bed3d5ce-7d58-4dad-9e05-6d2791871c8d",
												"exec": [
													"pm.test(\"Status code is 200 or OK\", function() {\r",
													"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Success status : 200\", function () \r",
													"{\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"200\");\r",
													"});\r",
													"\r",
													"pm.test(\"Success message : Password Updated Successfully.\", function() {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.messages).to.eql(\"Password Updated Successfully.\");\r",
													"});\r",
													"\r",
													"    pm.test(\"JSON schema validation\", function() {    \r",
													"    var schema = JSON.parse(environment.reset_password_after_login);\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    var result = tv4.validate(jsonData, schema, false, true);\r",
													"    if (result !== true) {\r",
													"        console.log('Schema validation failed:', tv4.error);\r",
													"        console.log(tv4.error.dataPath);\r",
													"    }\r",
													"    pm.expect(result).to.be.true;\r",
													"});\r",
													"\r",
													"    pm.test(\"Reset Password for the User\", function() {\r",
													"    var data =(pm.environment.get(\"tenant_id\"));\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    if(jsonData.data.length > 0) {\r",
													"    array_tenant_id = [];\r",
													"    for(i=0; i<jsonData.data.length; i++){\r",
													"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));\r",
													"      array_tenant_id.push(jsonData.data[i].user_id);\r",
													"    }\r",
													"    console.log(array_tenant_id);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tenant_token}}"
											},
											{
												"key": "Origin",
												"value": "file://",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "current_password",
													"value": "123456",
													"type": "text"
												},
												{
													"key": "password",
													"value": "123456",
													"type": "text"
												},
												{
													"key": "password_confirmation",
													"value": "123456",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/resetPassword",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"resetPassword"
											]
										}
									},
									"response": []
								},
								{
									"name": "If tenant enters invalid old password",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bed3d5ce-7d58-4dad-9e05-6d2791871c8d",
												"exec": [
													"pm.test(\"Status code is 400 or Bad Request\", function() {\r",
													"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Success status : 400\", function () \r",
													"{\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"400\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message : Current password is wrong. please enter correct current password.\", function() {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.messages).to.eql(\"Current password is wrong. please enter correct current password.\");\r",
													"});\r",
													"\r",
													"    pm.test(\"JSON schema validation\", function() {    \r",
													"    var schema = JSON.parse(environment.existing_email);\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    var result = tv4.validate(jsonData, schema, false, true);\r",
													"    if (result !== true) {\r",
													"        console.log('Schema validation failed:', tv4.error);\r",
													"        console.log(tv4.error.dataPath);\r",
													"    }\r",
													"    pm.expect(result).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tenant_token}}"
											},
											{
												"key": "Origin",
												"type": "text",
												"value": "file://"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "current_password",
													"value": "Temp",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "password_confirmation",
													"value": "Temp12345",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/resetPassword",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"resetPassword"
											]
										}
									},
									"response": []
								},
								{
									"name": "If tenant does not enters 6 digit password",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bed3d5ce-7d58-4dad-9e05-6d2791871c8d",
												"exec": [
													"pm.test(\"Status code is 400 or Bad Request\", function() {\r",
													"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Success status : 400\", function () \r",
													"{\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"400\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message : The password must be at least 6 characters.\", function() {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.password[0]).to.eql(\"The password must be at least 6 characters.\");\r",
													"});\r",
													"\r",
													"    pm.test(\"JSON schema validation\", function() {    \r",
													"    var schema = JSON.parse(environment.password_unmatch);\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    var result = tv4.validate(jsonData, schema, false, true);\r",
													"    if (result !== true) {\r",
													"        console.log('Schema validation failed:', tv4.error);\r",
													"        console.log(tv4.error.dataPath);\r",
													"    }\r",
													"    pm.expect(result).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tenant_token}}"
											},
											{
												"key": "Origin",
												"type": "text",
												"value": "file://"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "current_password",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Temp",
													"type": "text"
												},
												{
													"key": "password_confirmation",
													"value": "Temp",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/resetPassword",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"resetPassword"
											]
										}
									},
									"response": []
								},
								{
									"name": "If tenant does not enter old password",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bed3d5ce-7d58-4dad-9e05-6d2791871c8d",
												"exec": [
													"pm.test(\"Status code is 400 or Bad Request\", function() {\r",
													"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Success status : 400\", function () \r",
													"{\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"400\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message : The current password field is required.\", function() {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.current_password[0]).to.eql(\"The current password field is required.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message : Error\", function() {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.messages).to.eql(\"Error\");\r",
													"});\r",
													"\r",
													"    pm.test(\"JSON schema validation\", function() {    \r",
													"    var schema = JSON.parse(environment.password_unmatch);\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    var result = tv4.validate(jsonData, schema, false, true);\r",
													"    if (result !== true) {\r",
													"        console.log('Schema validation failed:', tv4.error);\r",
													"        console.log(tv4.error.dataPath);\r",
													"    }\r",
													"    pm.expect(result).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tenant_token}}"
											},
											{
												"key": "Origin",
												"type": "text",
												"value": "file://"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "current_password",
													"value": "",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "password_confirmation",
													"value": "Temp12345",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/resetPassword",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"resetPassword"
											]
										}
									},
									"response": []
								},
								{
									"name": "If tenant does not enter new password",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bed3d5ce-7d58-4dad-9e05-6d2791871c8d",
												"exec": [
													"pm.test(\"Status code is 400 or Bad Request\", function() {\r",
													"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Success status : 400\", function () \r",
													"{\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"400\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message : The password field is required.\", function() {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.password[0]).to.eql(\"The password field is required.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message : Error\", function() {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.messages).to.eql(\"Error\");\r",
													"});\r",
													"\r",
													"    pm.test(\"JSON schema validation\", function() {    \r",
													"    var schema = JSON.parse(environment.password_unmatch);\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    var result = tv4.validate(jsonData, schema, false, true);\r",
													"    if (result !== true) {\r",
													"        console.log('Schema validation failed:', tv4.error);\r",
													"        console.log(tv4.error.dataPath);\r",
													"    }\r",
													"    pm.expect(result).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tenant_token}}"
											},
											{
												"key": "Origin",
												"type": "text",
												"value": "file://"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "current_password",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "password",
													"value": "",
													"type": "text"
												},
												{
													"key": "password_confirmation",
													"value": "Temp12345",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/resetPassword",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"resetPassword"
											]
										}
									},
									"response": []
								},
								{
									"name": "If tenant does not enter confirm password",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bed3d5ce-7d58-4dad-9e05-6d2791871c8d",
												"exec": [
													"pm.test(\"Status code is 400 or Bad Request\", function() {\r",
													"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Success status : 400\", function () \r",
													"{\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"400\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message : The password confirmation does not match.\", function() {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.password[0]).to.eql(\"The password confirmation does not match.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Error message : Error\", function() {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.messages).to.eql(\"Error\");\r",
													"});\r",
													"\r",
													"    pm.test(\"JSON schema validation\", function() {    \r",
													"    var schema = JSON.parse(environment.password_unmatch);\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    var result = tv4.validate(jsonData, schema, false, true);\r",
													"    if (result !== true) {\r",
													"        console.log('Schema validation failed:', tv4.error);\r",
													"        console.log(tv4.error.dataPath);\r",
													"    }\r",
													"    pm.expect(result).to.be.true;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tenant_token}}"
											},
											{
												"key": "Origin",
												"type": "text",
												"value": "file://"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "current_password",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "password",
													"value": "Temp12345",
													"type": "text"
												},
												{
													"key": "password_confirmation",
													"value": "",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dev}}/v1/resetPassword",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"resetPassword"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Emergency contact",
							"item": [
								{
									"name": "Add emergency contact",
									"item": [
										{
											"name": "Add Emergency Contact",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7e16e954-f561-4812-a77e-f90d19e8b60d",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Emergency Contact Added Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Emergency Contact Added Successfully.\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.environment.set(\"emergency_contact_id\", jsonData.data.id);",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.add_emer_cont);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Emergency Contact for User\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"        pm.expect(jsonData.data.user_id).to.eql(pm.environment.get(\"tenant_id\"));",
															"      console.log(jsonData.data.user_id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"value": "Het",
															"type": "text"
														},
														{
															"key": "relationship",
															"value": "Raiyani",
															"type": "text"
														},
														{
															"key": "phone",
															"value": "+61800004545",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/emergencyContact",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"emergencyContact"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant enters invalid phone number",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a00b4fd2-2264-4452-bd40-f95f24b464f6",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Error status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Error message : The provided phone number must be the full number, with area codes and no spaces.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.phone[0]).to.eql(\"The provided phone number must be the full number, with area codes and no spaces.\");",
															"});",
															"",
															"pm.test(\"Error message : Error\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Error\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.invalid_phone_emer_cont);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"value": "Het",
															"type": "text"
														},
														{
															"key": "relationship",
															"value": "Raiyani",
															"type": "text"
														},
														{
															"key": "phone",
															"value": "8000045455",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/emergencyContact",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"emergencyContact"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Get emergency contact",
									"item": [
										{
											"name": "Get emergency contact",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a96dbae0-2538-494a-8dc3-8a64cea7ad38",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Success\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Success\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.get_emer_cont);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Emergency contact for User\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(pm.environment.get(\"tenant_id\"));",
															"        array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"});",
															"",
															"    var sort = require(\"lodash\");",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.test('Data are in sorted order', function () {",
															"        if(jsonData.data.length > 0) {",
															"        array_id = [];",
															"        for(i=0; i<jsonData.data.length; i++){",
															"    var expectedSortedOrder = sort.orderBy(jsonData.data, ['id'],['asc']);",
															"    pm.expect(jsonData.data).to.eql(expectedSortedOrder); ",
															"    array_id.push(jsonData.data[i].id);",
															"        }",
															"    console.log(array_id);",
															"    }",
															"  }",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													},
													{
														"key": "Origin",
														"value": "file://",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{dev}}/v1/emergencyContact",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"emergencyContact"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Update emergency contact",
									"item": [
										{
											"name": "Update Emergency Contact",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "062cebd5-8fcd-486f-a4d8-2209c49cd385",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Emergency Contact Updated Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Emergency Contact Updated Successfully.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.update_emer_cont);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "name",
															"value": "Riddhi",
															"type": "text"
														},
														{
															"key": "relationship",
															"value": "Friend",
															"type": "text"
														},
														{
															"key": "street_number",
															"value": "5",
															"type": "text"
														},
														{
															"key": "street_name",
															"value": "dffdf",
															"type": "text"
														},
														{
															"key": "suburb",
															"value": "sdsdsd",
															"type": "text"
														},
														{
															"key": "postcode",
															"value": "2345",
															"type": "text"
														},
														{
															"key": "phone",
															"value": "+61998765432",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/emergencyContact/{{emergency_contact_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"emergencyContact",
														"{{emergency_contact_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant enters invalid phone number",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "062cebd5-8fcd-486f-a4d8-2209c49cd385",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Error status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Error message : The provided phone number must be the full number, with area codes and no spaces.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.phone[0]).to.eql(\"The provided phone number must be the full number, with area codes and no spaces.\");",
															"});",
															"",
															"pm.test(\"Error message : Error\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Error\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.missing_phone_number);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "name",
															"value": "Riddhi",
															"type": "text"
														},
														{
															"key": "relationship",
															"value": "Friend",
															"type": "text"
														},
														{
															"key": "street_number",
															"value": "5",
															"type": "text"
														},
														{
															"key": "street_name",
															"value": "dffdf",
															"type": "text"
														},
														{
															"key": "suburb",
															"value": "sdsdsd",
															"type": "text"
														},
														{
															"key": "postcode",
															"value": "2345",
															"type": "text"
														},
														{
															"key": "phone",
															"value": "98765432",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/emergencyContact/396",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"emergencyContact",
														"396"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete emergency contact",
									"item": [
										{
											"name": "Delete Emergency Contact",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f8cdf0ed-46bd-4cee-905e-c98cb17bd797",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Emergency Contact Deleted Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Emergency Contact Deleted Successfully.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													},
													{
														"key": "Origin",
														"value": "file://",
														"type": "text"
													}
												],
												"body": {},
												"url": {
													"raw": "{{dev}}/v1/emergencyContact/{{emergency_contact_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"emergencyContact",
														"{{emergency_contact_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "If id does not exist",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f8cdf0ed-46bd-4cee-905e-c98cb17bd797",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Success message : No Such Emergency Contact Exist.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"No Such Emergency Contact Exist.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													},
													{
														"key": "Origin",
														"type": "text",
														"value": "file://"
													}
												],
												"body": {},
												"url": {
													"raw": "{{dev}}/v1/emergencyContact/{{emergency_contact_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"emergencyContact",
														"{{emergency_contact_id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "If emergency contact does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a96dbae0-2538-494a-8dc3-8a64cea7ad38",
												"exec": [
													"pm.test(\"Status code is 200 or OK\", function() {",
													"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Success status : 200\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"200\");",
													"});",
													"",
													"pm.test(\"Error message : No Emergency contacts Found\", function() {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"No Emergency contacts Found\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.no_emer_cont);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});",
													"",
													"    pm.test(\"JSON data is empty\", function () {",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tenant_token}}"
											},
											{
												"key": "Origin",
												"value": "file://",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{dev}}/v1/emergencyContact",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"emergencyContact"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2ef6d398-4d4e-460f-b698-88cbe86b3470",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8f08928e-545d-4491-8f1a-beb0c9406cd3",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Rental history",
							"item": [
								{
									"name": "Request rental history",
									"item": [
										{
											"name": "Add rental history",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a70a06eb-b445-40db-8f9a-e56f12b0a4e0",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status code : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Success\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Success\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.environment.set(\"tenant_uuid\", jsonData.data.uuid);",
															"",
															"var jsonData = pm.response.json();",
															"pm.environment.set(\"rental_id\", jsonData.data.id);",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.add_rental_history);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Rental history for User\", function () {",
															"\tvar data =(pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"    if(jsonData.data.length > 0) {",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));",
															"      array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													},
													{
														"key": "Origin",
														"value": "file://",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "current",
															"value": "0",
															"type": "text"
														},
														{
															"key": "street_number",
															"value": "9",
															"type": "text"
														},
														{
															"key": "street_name",
															"value": "Queensland Street",
															"type": "text"
														},
														{
															"key": "suburb",
															"value": "Brisbane City ",
															"type": "text"
														},
														{
															"key": "postcode",
															"value": "4968",
															"type": "text"
														},
														{
															"key": "rent",
															"value": "678",
															"type": "text"
														},
														{
															"key": "move_in_date",
															"value": "2017-07-01",
															"type": "text"
														},
														{
															"key": "move_out_date",
															"value": "2019-12-31",
															"type": "text"
														},
														{
															"key": "current_home_owner",
															"value": "1",
															"description": "0--> Home Owner , 1--> Agency",
															"type": "text"
														},
														{
															"key": "agency",
															"value": "Janvi Bhuva",
															"type": "text"
														},
														{
															"key": "agency_email",
															"value": "janvib@thirdrocktechkno.com",
															"type": "text"
														},
														{
															"key": "agency_phone",
															"value": "0937364776",
															"type": "text"
														},
														{
															"key": "sub_premise",
															"value": "7/48",
															"type": "text"
														},
														{
															"key": "state",
															"value": "QLD",
															"type": "text"
														},
														{
															"key": "country",
															"value": "Australia",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/tenantHistory",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"tenantHistory"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant enters his own email address",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a70a06eb-b445-40db-8f9a-e56f12b0a4e0",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Error status code : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Error message : Property manager email address can not be the same email address as the applicant\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Property manager email address can not be the same email address as the applicant\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													},
													{
														"key": "Origin",
														"type": "text",
														"value": "file://"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "current",
															"value": "0",
															"type": "text"
														},
														{
															"key": "street_number",
															"value": "9",
															"type": "text"
														},
														{
															"key": "street_name",
															"value": "Queensland Street",
															"type": "text"
														},
														{
															"key": "suburb",
															"value": "Brisbane City ",
															"type": "text"
														},
														{
															"key": "postcode",
															"value": "4968",
															"type": "text"
														},
														{
															"key": "rent",
															"value": "678",
															"type": "text"
														},
														{
															"key": "move_in_date",
															"value": "2017-07-01",
															"type": "text"
														},
														{
															"key": "move_out_date",
															"value": "2019-12-31",
															"type": "text"
														},
														{
															"key": "current_home_owner",
															"value": "1",
															"description": "0--> Home Owner , 1--> Agency",
															"type": "text"
														},
														{
															"key": "agency",
															"value": "Janvi Bhuva",
															"type": "text"
														},
														{
															"key": "agency_email",
															"value": "{{tenant_email}}",
															"type": "text"
														},
														{
															"key": "agency_phone",
															"value": "0937364776",
															"type": "text"
														},
														{
															"key": "sub_premise",
															"value": "7/48",
															"type": "text"
														},
														{
															"key": "state",
															"value": "QLD",
															"type": "text"
														},
														{
															"key": "country",
															"value": "Australia",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/tenantHistory",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"tenantHistory"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant does not enter required fields when home owner is selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8f793710-fae4-43ec-8149-861e603dbc83",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Success message : Error\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Error\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.rental_history_missing);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													},
													{
														"key": "Origin",
														"type": "text",
														"value": "file://"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "current",
															"value": "",
															"description": "0",
															"type": "text"
														},
														{
															"key": "street_number",
															"value": "",
															"type": "text"
														},
														{
															"key": "street_name",
															"value": "",
															"type": "text"
														},
														{
															"key": "suburb",
															"value": "",
															"type": "text"
														},
														{
															"key": "postcode",
															"value": "",
															"type": "text"
														},
														{
															"key": "rent",
															"value": "",
															"type": "text"
														},
														{
															"key": "move_in_date",
															"value": "",
															"type": "text"
														},
														{
															"key": "move_out_date",
															"value": "2019-12-31",
															"description": "0--> Home Owner , 1--> Agency",
															"type": "text"
														},
														{
															"key": "current_home_owner",
															"value": "",
															"type": "text"
														},
														{
															"key": "agency",
															"value": "TRT",
															"type": "text"
														},
														{
															"key": "agency_email",
															"value": "janvib@thirdrocktechkno.com",
															"type": "text"
														},
														{
															"key": "agency_phone",
															"value": "0987654344",
															"type": "text"
														},
														{
															"key": "sub_premise",
															"value": "",
															"type": "text"
														},
														{
															"key": "state",
															"value": "",
															"type": "text"
														},
														{
															"key": "country",
															"value": "",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/tenantHistory",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"tenantHistory"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant does not enter required fields when agency is selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8f793710-fae4-43ec-8149-861e603dbc83",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Success message : Error\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Error\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.rental_history_missing1);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													},
													{
														"key": "Origin",
														"type": "text",
														"value": "file://"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "current",
															"value": "0",
															"description": "0",
															"type": "text"
														},
														{
															"key": "street_number",
															"value": "9",
															"type": "text"
														},
														{
															"key": "street_name",
															"value": "Shambhus Street",
															"type": "text"
														},
														{
															"key": "suburb",
															"value": "RLD",
															"type": "text"
														},
														{
															"key": "postcode",
															"value": "4968",
															"type": "text"
														},
														{
															"key": "rent",
															"value": "678",
															"type": "text"
														},
														{
															"key": "move_in_date",
															"value": "2017-07-01",
															"type": "text"
														},
														{
															"key": "move_out_date",
															"value": "2019-12-31",
															"description": "0--> Home Owner , 1--> Agency",
															"type": "text"
														},
														{
															"key": "current_home_owner",
															"value": "1",
															"type": "text"
														},
														{
															"key": "agency",
															"value": "",
															"type": "text"
														},
														{
															"key": "agency_email",
															"value": "",
															"type": "text"
														},
														{
															"key": "agency_phone",
															"value": "",
															"type": "text"
														},
														{
															"key": "sub_premise",
															"value": "2",
															"type": "text"
														},
														{
															"key": "state",
															"value": "QLD",
															"type": "text"
														},
														{
															"key": "country",
															"value": "Brisbane",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/tenantHistory",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"tenantHistory"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Get rental history",
									"item": [
										{
											"name": "Get all rental history (old)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0b7abadd-5487-4f98-a129-081f745b2753",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"    pm.test(\"Rental history for User\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.length; i++){",
															"        pm.expect(jsonData[i].user_id).to.eql(pm.environment.get(\"tenant_id\"));",
															"      array_tenant_id.push(jsonData[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"});",
															"",
															"    var sort = require(\"lodash\");",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.test('Data are in Ascending order', function () {",
															"        if(jsonData.length > 0) {",
															"        array_id = [];",
															"        for(i=0; i<jsonData.length; i++){",
															"    var expectedSortedOrder = sort.orderBy(jsonData, ['id'], ['asc']);",
															"    pm.expect(jsonData).to.eql(expectedSortedOrder); ",
															"    array_id.push(jsonData[i].id);",
															"        }",
															"    console.log(array_id);",
															"    }",
															"  }",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{dev}}/v1/tenantHistory",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"tenantHistory"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get all rental history (new)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "065694c9-e3bd-43a4-adc0-cf29d225df5f",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success message : Success\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Success\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.get_rental_history);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Rental history for User\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.length; i++){",
															"        pm.expect(jsonData[i].user_id).to.eql(pm.environment.get(\"tenant_id\"));",
															"      array_tenant_id.push(jsonData[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"});",
															"",
															"    var sort = require(\"lodash\");",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.test('Data are in Ascending order', function () {",
															"        if(jsonData.length > 0) {",
															"        array_id = [];",
															"        for(i=0; i<jsonData.length; i++){",
															"    var expectedSortedOrder = sort.orderBy(jsonData, ['id'], ['asc']);",
															"    pm.expect(jsonData).to.eql(expectedSortedOrder); ",
															"    array_id.push(jsonData[i].id);",
															"        }",
															"    console.log(array_id);",
															"    }",
															"  }",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{dev}}/v1/tenantHistoryListing",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"tenantHistoryListing"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Update rental history",
									"item": [
										{
											"name": "Update tenant history",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c2696299-6a2d-42b7-9488-1a64e491bcff",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Success\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Success\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.get_rental_history);",
															"    var jsonData = JSON.parse(responseBody);",
															"    if(jsonData.data.length > 0) {",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"    }",
															"});",
															"",
															"\tpm.test(\"Rental history for User\", function () {",
															"\tvar data =(pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"    if(jsonData.data.length > 0) {",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));",
															"      array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"    }",
															"});",
															"",
															"    pm.test(\"Rental history for User\", function () {    ",
															"\tvar data =(pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"    if(jsonData.data.length > 0) {",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));",
															"      array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "current",
															"value": "0",
															"type": "text"
														},
														{
															"key": "street_number",
															"value": "8",
															"type": "text"
														},
														{
															"key": "street_name",
															"value": "James Street",
															"type": "text"
														},
														{
															"key": "suburb",
															"value": "brisbane",
															"type": "text"
														},
														{
															"key": "postcode",
															"value": "4574",
															"type": "text"
														},
														{
															"key": "rent",
															"value": "750",
															"type": "text"
														},
														{
															"key": "move_in_date",
															"value": "2017-06-01",
															"type": "text"
														},
														{
															"key": "move_out_date",
															"value": "2017-12-31",
															"type": "text"
														},
														{
															"key": "agency",
															"value": "Janvi",
															"type": "text"
														},
														{
															"key": "agency_email",
															"value": "janvib@thirdrocktechkno.com",
															"type": "text"
														},
														{
															"key": "agency_phone",
															"value": "0988888888",
															"type": "text"
														},
														{
															"key": "current_home_owner",
															"value": "0",
															"type": "text"
														},
														{
															"key": "sub_premise",
															"value": "",
															"type": "text"
														},
														{
															"key": "state",
															"value": "",
															"type": "text"
														},
														{
															"key": "country",
															"value": "",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/tenantHistory/{{tenant_uuid}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"tenantHistory",
														"{{tenant_uuid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant does not enter required field when home owner is selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c2696299-6a2d-42b7-9488-1a64e491bcff",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Error status code : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"    pm.test(\"Error message : Error\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Error\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.update_rental_history_missing);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "current",
															"value": "",
															"type": "text"
														},
														{
															"key": "street_number",
															"value": "",
															"type": "text"
														},
														{
															"key": "street_name",
															"value": "",
															"type": "text"
														},
														{
															"key": "suburb",
															"value": "",
															"type": "text"
														},
														{
															"key": "postcode",
															"value": "",
															"type": "text"
														},
														{
															"key": "rent",
															"value": "750",
															"type": "text"
														},
														{
															"key": "move_in_date",
															"value": "",
															"type": "text"
														},
														{
															"key": "move_out_date",
															"value": "2017-12-31",
															"type": "text"
														},
														{
															"key": "agency",
															"value": "",
															"type": "text"
														},
														{
															"key": "agency_email",
															"value": "",
															"type": "text"
														},
														{
															"key": "agency_phone",
															"value": "",
															"type": "text"
														},
														{
															"key": "current_home_owner",
															"value": "0",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/tenantHistory/{{tenant_uuid}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"tenantHistory",
														"{{tenant_uuid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant does not enter required field when agency is selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c2696299-6a2d-42b7-9488-1a64e491bcff",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Error status code : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"    pm.test(\"Error message : Error\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Error\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.update_rental_history_missing1);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "current",
															"value": "",
															"type": "text"
														},
														{
															"key": "street_number",
															"value": "",
															"type": "text"
														},
														{
															"key": "street_name",
															"value": "",
															"type": "text"
														},
														{
															"key": "suburb",
															"value": "",
															"type": "text"
														},
														{
															"key": "postcode",
															"value": "",
															"type": "text"
														},
														{
															"key": "rent",
															"value": "750",
															"type": "text"
														},
														{
															"key": "move_in_date",
															"value": "",
															"type": "text"
														},
														{
															"key": "move_out_date",
															"value": "2017-12-31",
															"type": "text"
														},
														{
															"key": "agency",
															"value": "",
															"type": "text"
														},
														{
															"key": "agency_email",
															"value": "",
															"type": "text"
														},
														{
															"key": "agency_phone",
															"value": "",
															"type": "text"
														},
														{
															"key": "current_home_owner",
															"value": "1",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/tenantHistory/{{tenant_uuid}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"tenantHistory",
														"{{tenant_uuid}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete rental history",
									"item": [
										{
											"name": "Delete rental history",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "00638b95-48c2-42b0-b2ce-980c719b6315",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Tenant History Deleted Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Tenant History Deleted Successfully.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{dev}}/v1/tenantHistory/{{tenant_uuid}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"tenantHistory",
														"{{tenant_uuid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant enters the UUID that does not exists",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "00638b95-48c2-42b0-b2ce-980c719b6315",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Error message : No Such Tenant History Exist.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"No Such Tenant History Exist.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{dev}}/v1/tenantHistory/{{tenant_uuid}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"tenantHistory",
														"{{tenant_uuid}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Can prompt",
									"item": [
										{
											"name": "Can Prompt ",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a49fc415-f005-4bec-b2ee-31002fdc3071",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Success.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"Success.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.get_rental_history);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{dev}}/v1/prompt/30",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"prompt",
														"30"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant is not authorised to prompt",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b4bee04e-1a83-46cf-a5c1-bb4ed34a2f90",
														"exec": [
															"pm.test(\"Status code is 401 or Unauthorized\", function() {",
															"    pm.response.to.have.status(401) || pm.response.to.have.status(\"Unauthorized\");",
															"});",
															"",
															"pm.test(\"Success status : 401\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"401\");",
															"});",
															"",
															"pm.test(\"Success message : Access is denied due to invalid credentials.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Access is denied due to invalid credentials.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{dev}}/v1/prompt/30",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"prompt",
														"30"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Co-occupants",
							"item": [
								{
									"name": "Add co-occupant",
									"item": [
										{
											"name": "Add co-occupant",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "131a022d-ce11-486c-bd56-dc389202f319",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Co-occupant Added Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Co-occupant Added Successfully.\");",
															"        console.log(jsonData.data.agency_email);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.environment.set(\"co-occupant_id\", jsonData.data.id);",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.add_cooccupant);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Co-occupant for User\", function () {",
															"    var data =(pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"    if(jsonData.data.length > 0) {",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));",
															"      array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "firstname",
															"value": "das",
															"type": "text"
														},
														{
															"key": "lastname",
															"value": "Parmar",
															"type": "text"
														},
														{
															"key": "email",
															"value": "{{co-occupant_email}}",
															"type": "text"
														},
														{
															"key": "age",
															"value": "23",
															"type": "text"
														},
														{
															"key": "phonenumber",
															"value": "+61741247874",
															"type": "text"
														},
														{
															"key": "relationship",
															"value": "Friend",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/cooccupants",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"cooccupants"
													]
												}
											},
											"response": [
												{
													"name": "Co-occupant Request",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImVhOTkwNzM2YzM3MTEzZjQ4Y2RiMGRkYzQxMWEzMDcxZTI3ZDAyMjJjODc5NWQzZTg1Y2ZjMjU2OWEzMzdmNWE5MjVjMTg4NzQ3YjIyNGEwIn0.eyJhdWQiOiIxIiwianRpIjoiZWE5OTA3MzZjMzcxMTNmNDhjZGIwZGRjNDExYTMwNzFlMjdkMDIyMmM4Nzk1ZDNlODVjZmMyNTY5YTMzN2Y1YTkyNWMxODg3NDdiMjI0YTAiLCJpYXQiOjE1MzY1ODM1OTIsIm5iZiI6MTUzNjU4MzU5MiwiZXhwIjoxNTY4MTE5NTkyLCJzdWIiOiIxIiwic2NvcGVzIjpbImRhc2hib2FyZC1hY2Nlc3MiXX0.iXjkC_UuIrjOvISRfZMZEyib-vlfVj8OM7NygzfsK4T2tGfsJnsvLIiJcmSVzoWt4kOxtkJfPZr-gvhTBvJUO7Cbb24tQ5NWzCta8pcSYFBOFzmm0aG2DhIcvrNDkVf8ocDMHKr7kUO47r9GVy-aSY66nQHJDNOdGCHyozauOXVi-9SLV4b4-XEcKMyuJSyuH-sxrnfKMM9PZS2vU2FmjT_pfR3uDSqoJhSIo_mKrr1E68nGwKQLK4i0qWe8g9D8Qphp2TklbWfDbLCl8LUMS-QkUIysC3RkyHQrJmjuzoPvdoAJw6QgqXbmnm7B-HpwhEO6-ERDNU0ShJlxvXYUz5EJ4FUIvkSElmJqVcNniP7P3H0FFoQm9-xodK-2tkncv8ObXNk7fLsgPl0xN0XWLIfce6I925cpUpjV0KZnJ9S0YZEulOWoJX76531NTKh_rcg2TiBzY_ep0Q9bhcejeEA5qeMpQU8aozSxV_zz2zY3rU3r4nq0h9eQRIjxAAobJbyXG-VVPY-q2QkAK6CEeRT4xodJILsZKgHa9WZq9odgg48QmXt_orO38uN9vz3vbyczULBxJrypPAhPxWkN-tyVlZs-9BCwGRscXdwDeO2_48gsWcNywGoNr3Q6LdSJFYAsCAmkUN_kVheW-HAwBfYjVjwV0MVIiRUDrHjzY-8",
																"warning": ""
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "firstname",
																	"value": "Test5",
																	"type": "text"
																},
																{
																	"key": "lastname",
																	"value": "User5",
																	"type": "text"
																},
																{
																	"key": "email",
																	"value": "developer+9999999@thirdrocktechkno.com",
																	"type": "text"
																},
																{
																	"key": "phonenumber",
																	"value": "6574124787",
																	"type": "text"
																},
																{
																	"key": "relationship",
																	"value": "Friend",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "http://27.109.15.190:8088/v1/cooccupants",
															"protocol": "http",
															"host": [
																"27",
																"109",
																"15",
																"190"
															],
															"port": "8088",
															"path": [
																"v1",
																"cooccupants"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "access-control-allow-credentials",
															"value": "1",
															"name": "access-control-allow-credentials",
															"description": ""
														},
														{
															"key": "access-control-allow-headers",
															"value": "*",
															"name": "access-control-allow-headers",
															"description": ""
														},
														{
															"key": "access-control-allow-methods",
															"value": "GET, POST, PUT, DELETE, OPTIONS",
															"name": "access-control-allow-methods",
															"description": ""
														},
														{
															"key": "access-control-allow-origin",
															"value": "*",
															"name": "access-control-allow-origin",
															"description": ""
														},
														{
															"key": "cache-control",
															"value": "no-cache, private",
															"name": "cache-control",
															"description": ""
														},
														{
															"key": "connection",
															"value": "keep-alive",
															"name": "connection",
															"description": ""
														},
														{
															"key": "content-type",
															"value": "application/json",
															"name": "content-type",
															"description": ""
														},
														{
															"key": "date",
															"value": "Mon, 10 Sep 2018 12:48:26 GMT",
															"name": "date",
															"description": ""
														},
														{
															"key": "server",
															"value": "nginx/1.13.12",
															"name": "server",
															"description": ""
														},
														{
															"key": "transfer-encoding",
															"value": "chunked",
															"name": "transfer-encoding",
															"description": ""
														},
														{
															"key": "x-powered-by",
															"value": "PHP/7.2.3",
															"name": "x-powered-by",
															"description": ""
														},
														{
															"key": "x-ratelimit-limit",
															"value": "60",
															"name": "x-ratelimit-limit",
															"description": ""
														},
														{
															"key": "x-ratelimit-remaining",
															"value": "59",
															"name": "x-ratelimit-remaining",
															"description": ""
														}
													],
													"cookie": [],
													"body": "{\"status\":\"200\",\"messages\":\"Co-occupant Added Successfully.\",\"data\":{\"id\":54,\"firstname\":\"Test5\",\"lastname\":\"User5\",\"email\":\"developer+9999999@thirdrocktechkno.com\",\"age\":null,\"phonenumber\":\"6574124787\",\"relationship\":\"Friend\",\"user_id\":1,\"created_at\":\"2018-09-10 22:48:25\",\"updated_at\":\"2018-09-10 22:48:25\",\"user\":{\"id\":1,\"first_name\":\"Rahul\",\"last_name\":\"Riddhi\",\"email\":\"developer@thirdrocktechkno.com\",\"phone\":\"9687457485\",\"age\":\"26\",\"created_at\":\"2018-05-17 16:18:58\",\"updated_at\":\"2018-06-25 22:14:19\",\"pm\":0}}}"
												}
											]
										},
										{
											"name": "Add co-occupant mapper",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "131a022d-ce11-486c-bd56-dc389202f319",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Co-occupant Added Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Co-occupant Added Successfully.\");",
															"        console.log(jsonData.data.agency_email);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.environment.set(\"occupantmapper_id\", jsonData.data.id);",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.add_cooccupant_mapper);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Co-occupant Mapper for User\", function () {",
															"    var data =(pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"    if(jsonData.data.length > 0) {",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));",
															"      array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "firstname",
															"value": "das",
															"type": "text"
														},
														{
															"key": "lastname",
															"value": "Parmar",
															"type": "text"
														},
														{
															"key": "email",
															"value": "{{occupantmapper_email}}",
															"type": "text"
														},
														{
															"key": "age",
															"value": "23",
															"type": "text"
														},
														{
															"key": "phonenumber",
															"value": "+61741247874",
															"type": "text"
														},
														{
															"key": "relationship",
															"value": "Friend",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/cooccupants",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"cooccupants"
													]
												}
											},
											"response": [
												{
													"name": "Co-occupant Request",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImVhOTkwNzM2YzM3MTEzZjQ4Y2RiMGRkYzQxMWEzMDcxZTI3ZDAyMjJjODc5NWQzZTg1Y2ZjMjU2OWEzMzdmNWE5MjVjMTg4NzQ3YjIyNGEwIn0.eyJhdWQiOiIxIiwianRpIjoiZWE5OTA3MzZjMzcxMTNmNDhjZGIwZGRjNDExYTMwNzFlMjdkMDIyMmM4Nzk1ZDNlODVjZmMyNTY5YTMzN2Y1YTkyNWMxODg3NDdiMjI0YTAiLCJpYXQiOjE1MzY1ODM1OTIsIm5iZiI6MTUzNjU4MzU5MiwiZXhwIjoxNTY4MTE5NTkyLCJzdWIiOiIxIiwic2NvcGVzIjpbImRhc2hib2FyZC1hY2Nlc3MiXX0.iXjkC_UuIrjOvISRfZMZEyib-vlfVj8OM7NygzfsK4T2tGfsJnsvLIiJcmSVzoWt4kOxtkJfPZr-gvhTBvJUO7Cbb24tQ5NWzCta8pcSYFBOFzmm0aG2DhIcvrNDkVf8ocDMHKr7kUO47r9GVy-aSY66nQHJDNOdGCHyozauOXVi-9SLV4b4-XEcKMyuJSyuH-sxrnfKMM9PZS2vU2FmjT_pfR3uDSqoJhSIo_mKrr1E68nGwKQLK4i0qWe8g9D8Qphp2TklbWfDbLCl8LUMS-QkUIysC3RkyHQrJmjuzoPvdoAJw6QgqXbmnm7B-HpwhEO6-ERDNU0ShJlxvXYUz5EJ4FUIvkSElmJqVcNniP7P3H0FFoQm9-xodK-2tkncv8ObXNk7fLsgPl0xN0XWLIfce6I925cpUpjV0KZnJ9S0YZEulOWoJX76531NTKh_rcg2TiBzY_ep0Q9bhcejeEA5qeMpQU8aozSxV_zz2zY3rU3r4nq0h9eQRIjxAAobJbyXG-VVPY-q2QkAK6CEeRT4xodJILsZKgHa9WZq9odgg48QmXt_orO38uN9vz3vbyczULBxJrypPAhPxWkN-tyVlZs-9BCwGRscXdwDeO2_48gsWcNywGoNr3Q6LdSJFYAsCAmkUN_kVheW-HAwBfYjVjwV0MVIiRUDrHjzY-8",
																"warning": ""
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "firstname",
																	"value": "Test5",
																	"type": "text"
																},
																{
																	"key": "lastname",
																	"value": "User5",
																	"type": "text"
																},
																{
																	"key": "email",
																	"value": "developer+9999999@thirdrocktechkno.com",
																	"type": "text"
																},
																{
																	"key": "phonenumber",
																	"value": "6574124787",
																	"type": "text"
																},
																{
																	"key": "relationship",
																	"value": "Friend",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "http://27.109.15.190:8088/v1/cooccupants",
															"protocol": "http",
															"host": [
																"27",
																"109",
																"15",
																"190"
															],
															"port": "8088",
															"path": [
																"v1",
																"cooccupants"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "access-control-allow-credentials",
															"value": "1",
															"name": "access-control-allow-credentials",
															"description": ""
														},
														{
															"key": "access-control-allow-headers",
															"value": "*",
															"name": "access-control-allow-headers",
															"description": ""
														},
														{
															"key": "access-control-allow-methods",
															"value": "GET, POST, PUT, DELETE, OPTIONS",
															"name": "access-control-allow-methods",
															"description": ""
														},
														{
															"key": "access-control-allow-origin",
															"value": "*",
															"name": "access-control-allow-origin",
															"description": ""
														},
														{
															"key": "cache-control",
															"value": "no-cache, private",
															"name": "cache-control",
															"description": ""
														},
														{
															"key": "connection",
															"value": "keep-alive",
															"name": "connection",
															"description": ""
														},
														{
															"key": "content-type",
															"value": "application/json",
															"name": "content-type",
															"description": ""
														},
														{
															"key": "date",
															"value": "Mon, 10 Sep 2018 12:48:26 GMT",
															"name": "date",
															"description": ""
														},
														{
															"key": "server",
															"value": "nginx/1.13.12",
															"name": "server",
															"description": ""
														},
														{
															"key": "transfer-encoding",
															"value": "chunked",
															"name": "transfer-encoding",
															"description": ""
														},
														{
															"key": "x-powered-by",
															"value": "PHP/7.2.3",
															"name": "x-powered-by",
															"description": ""
														},
														{
															"key": "x-ratelimit-limit",
															"value": "60",
															"name": "x-ratelimit-limit",
															"description": ""
														},
														{
															"key": "x-ratelimit-remaining",
															"value": "59",
															"name": "x-ratelimit-remaining",
															"description": ""
														}
													],
													"cookie": [],
													"body": "{\"status\":\"200\",\"messages\":\"Co-occupant Added Successfully.\",\"data\":{\"id\":54,\"firstname\":\"Test5\",\"lastname\":\"User5\",\"email\":\"developer+9999999@thirdrocktechkno.com\",\"age\":null,\"phonenumber\":\"6574124787\",\"relationship\":\"Friend\",\"user_id\":1,\"created_at\":\"2018-09-10 22:48:25\",\"updated_at\":\"2018-09-10 22:48:25\",\"user\":{\"id\":1,\"first_name\":\"Rahul\",\"last_name\":\"Riddhi\",\"email\":\"developer@thirdrocktechkno.com\",\"phone\":\"9687457485\",\"age\":\"26\",\"created_at\":\"2018-05-17 16:18:58\",\"updated_at\":\"2018-06-25 22:14:19\",\"pm\":0}}}"
												}
											]
										},
										{
											"name": "If co-occupant already exists",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "131a022d-ce11-486c-bd56-dc389202f319",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : You are already co-occupant with this user.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"You are already co-occupant with this user.\");",
															"        console.log(jsonData.data.agency_email);",
															"});",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "firstname",
															"value": "das",
															"type": "text"
														},
														{
															"key": "lastname",
															"value": "Parmar",
															"type": "text"
														},
														{
															"key": "email",
															"value": "{{co-occupant_email}}",
															"type": "text"
														},
														{
															"key": "age",
															"value": "23",
															"type": "text"
														},
														{
															"key": "phonenumber",
															"value": "+61741247874",
															"type": "text"
														},
														{
															"key": "relationship",
															"value": "Friend",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/cooccupants",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"cooccupants"
													]
												}
											},
											"response": [
												{
													"name": "Co-occupant Request",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImVhOTkwNzM2YzM3MTEzZjQ4Y2RiMGRkYzQxMWEzMDcxZTI3ZDAyMjJjODc5NWQzZTg1Y2ZjMjU2OWEzMzdmNWE5MjVjMTg4NzQ3YjIyNGEwIn0.eyJhdWQiOiIxIiwianRpIjoiZWE5OTA3MzZjMzcxMTNmNDhjZGIwZGRjNDExYTMwNzFlMjdkMDIyMmM4Nzk1ZDNlODVjZmMyNTY5YTMzN2Y1YTkyNWMxODg3NDdiMjI0YTAiLCJpYXQiOjE1MzY1ODM1OTIsIm5iZiI6MTUzNjU4MzU5MiwiZXhwIjoxNTY4MTE5NTkyLCJzdWIiOiIxIiwic2NvcGVzIjpbImRhc2hib2FyZC1hY2Nlc3MiXX0.iXjkC_UuIrjOvISRfZMZEyib-vlfVj8OM7NygzfsK4T2tGfsJnsvLIiJcmSVzoWt4kOxtkJfPZr-gvhTBvJUO7Cbb24tQ5NWzCta8pcSYFBOFzmm0aG2DhIcvrNDkVf8ocDMHKr7kUO47r9GVy-aSY66nQHJDNOdGCHyozauOXVi-9SLV4b4-XEcKMyuJSyuH-sxrnfKMM9PZS2vU2FmjT_pfR3uDSqoJhSIo_mKrr1E68nGwKQLK4i0qWe8g9D8Qphp2TklbWfDbLCl8LUMS-QkUIysC3RkyHQrJmjuzoPvdoAJw6QgqXbmnm7B-HpwhEO6-ERDNU0ShJlxvXYUz5EJ4FUIvkSElmJqVcNniP7P3H0FFoQm9-xodK-2tkncv8ObXNk7fLsgPl0xN0XWLIfce6I925cpUpjV0KZnJ9S0YZEulOWoJX76531NTKh_rcg2TiBzY_ep0Q9bhcejeEA5qeMpQU8aozSxV_zz2zY3rU3r4nq0h9eQRIjxAAobJbyXG-VVPY-q2QkAK6CEeRT4xodJILsZKgHa9WZq9odgg48QmXt_orO38uN9vz3vbyczULBxJrypPAhPxWkN-tyVlZs-9BCwGRscXdwDeO2_48gsWcNywGoNr3Q6LdSJFYAsCAmkUN_kVheW-HAwBfYjVjwV0MVIiRUDrHjzY-8",
																"warning": ""
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "firstname",
																	"value": "Test5",
																	"type": "text"
																},
																{
																	"key": "lastname",
																	"value": "User5",
																	"type": "text"
																},
																{
																	"key": "email",
																	"value": "developer+9999999@thirdrocktechkno.com",
																	"type": "text"
																},
																{
																	"key": "phonenumber",
																	"value": "6574124787",
																	"type": "text"
																},
																{
																	"key": "relationship",
																	"value": "Friend",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "http://27.109.15.190:8088/v1/cooccupants",
															"protocol": "http",
															"host": [
																"27",
																"109",
																"15",
																"190"
															],
															"port": "8088",
															"path": [
																"v1",
																"cooccupants"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "access-control-allow-credentials",
															"value": "1",
															"name": "access-control-allow-credentials",
															"description": ""
														},
														{
															"key": "access-control-allow-headers",
															"value": "*",
															"name": "access-control-allow-headers",
															"description": ""
														},
														{
															"key": "access-control-allow-methods",
															"value": "GET, POST, PUT, DELETE, OPTIONS",
															"name": "access-control-allow-methods",
															"description": ""
														},
														{
															"key": "access-control-allow-origin",
															"value": "*",
															"name": "access-control-allow-origin",
															"description": ""
														},
														{
															"key": "cache-control",
															"value": "no-cache, private",
															"name": "cache-control",
															"description": ""
														},
														{
															"key": "connection",
															"value": "keep-alive",
															"name": "connection",
															"description": ""
														},
														{
															"key": "content-type",
															"value": "application/json",
															"name": "content-type",
															"description": ""
														},
														{
															"key": "date",
															"value": "Mon, 10 Sep 2018 12:48:26 GMT",
															"name": "date",
															"description": ""
														},
														{
															"key": "server",
															"value": "nginx/1.13.12",
															"name": "server",
															"description": ""
														},
														{
															"key": "transfer-encoding",
															"value": "chunked",
															"name": "transfer-encoding",
															"description": ""
														},
														{
															"key": "x-powered-by",
															"value": "PHP/7.2.3",
															"name": "x-powered-by",
															"description": ""
														},
														{
															"key": "x-ratelimit-limit",
															"value": "60",
															"name": "x-ratelimit-limit",
															"description": ""
														},
														{
															"key": "x-ratelimit-remaining",
															"value": "59",
															"name": "x-ratelimit-remaining",
															"description": ""
														}
													],
													"cookie": [],
													"body": "{\"status\":\"200\",\"messages\":\"Co-occupant Added Successfully.\",\"data\":{\"id\":54,\"firstname\":\"Test5\",\"lastname\":\"User5\",\"email\":\"developer+9999999@thirdrocktechkno.com\",\"age\":null,\"phonenumber\":\"6574124787\",\"relationship\":\"Friend\",\"user_id\":1,\"created_at\":\"2018-09-10 22:48:25\",\"updated_at\":\"2018-09-10 22:48:25\",\"user\":{\"id\":1,\"first_name\":\"Rahul\",\"last_name\":\"Riddhi\",\"email\":\"developer@thirdrocktechkno.com\",\"phone\":\"9687457485\",\"age\":\"26\",\"created_at\":\"2018-05-17 16:18:58\",\"updated_at\":\"2018-06-25 22:14:19\",\"pm\":0}}}"
												}
											]
										},
										{
											"name": "If co-occupant mapper already exists",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "131a022d-ce11-486c-bd56-dc389202f319",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : You are already co-occupant with this user.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"You are already co-occupant with this user.\");",
															"        console.log(jsonData.data.agency_email);",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "firstname",
															"value": "das",
															"type": "text"
														},
														{
															"key": "lastname",
															"value": "Parmar",
															"type": "text"
														},
														{
															"key": "email",
															"value": "{{occupantmapper_email}}",
															"type": "text"
														},
														{
															"key": "age",
															"value": "23",
															"type": "text"
														},
														{
															"key": "phonenumber",
															"value": "+61741247874",
															"type": "text"
														},
														{
															"key": "relationship",
															"value": "Friend",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/cooccupants",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"cooccupants"
													]
												}
											},
											"response": [
												{
													"name": "Co-occupant Request",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImVhOTkwNzM2YzM3MTEzZjQ4Y2RiMGRkYzQxMWEzMDcxZTI3ZDAyMjJjODc5NWQzZTg1Y2ZjMjU2OWEzMzdmNWE5MjVjMTg4NzQ3YjIyNGEwIn0.eyJhdWQiOiIxIiwianRpIjoiZWE5OTA3MzZjMzcxMTNmNDhjZGIwZGRjNDExYTMwNzFlMjdkMDIyMmM4Nzk1ZDNlODVjZmMyNTY5YTMzN2Y1YTkyNWMxODg3NDdiMjI0YTAiLCJpYXQiOjE1MzY1ODM1OTIsIm5iZiI6MTUzNjU4MzU5MiwiZXhwIjoxNTY4MTE5NTkyLCJzdWIiOiIxIiwic2NvcGVzIjpbImRhc2hib2FyZC1hY2Nlc3MiXX0.iXjkC_UuIrjOvISRfZMZEyib-vlfVj8OM7NygzfsK4T2tGfsJnsvLIiJcmSVzoWt4kOxtkJfPZr-gvhTBvJUO7Cbb24tQ5NWzCta8pcSYFBOFzmm0aG2DhIcvrNDkVf8ocDMHKr7kUO47r9GVy-aSY66nQHJDNOdGCHyozauOXVi-9SLV4b4-XEcKMyuJSyuH-sxrnfKMM9PZS2vU2FmjT_pfR3uDSqoJhSIo_mKrr1E68nGwKQLK4i0qWe8g9D8Qphp2TklbWfDbLCl8LUMS-QkUIysC3RkyHQrJmjuzoPvdoAJw6QgqXbmnm7B-HpwhEO6-ERDNU0ShJlxvXYUz5EJ4FUIvkSElmJqVcNniP7P3H0FFoQm9-xodK-2tkncv8ObXNk7fLsgPl0xN0XWLIfce6I925cpUpjV0KZnJ9S0YZEulOWoJX76531NTKh_rcg2TiBzY_ep0Q9bhcejeEA5qeMpQU8aozSxV_zz2zY3rU3r4nq0h9eQRIjxAAobJbyXG-VVPY-q2QkAK6CEeRT4xodJILsZKgHa9WZq9odgg48QmXt_orO38uN9vz3vbyczULBxJrypPAhPxWkN-tyVlZs-9BCwGRscXdwDeO2_48gsWcNywGoNr3Q6LdSJFYAsCAmkUN_kVheW-HAwBfYjVjwV0MVIiRUDrHjzY-8",
																"warning": ""
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "firstname",
																	"value": "Test5",
																	"type": "text"
																},
																{
																	"key": "lastname",
																	"value": "User5",
																	"type": "text"
																},
																{
																	"key": "email",
																	"value": "developer+9999999@thirdrocktechkno.com",
																	"type": "text"
																},
																{
																	"key": "phonenumber",
																	"value": "6574124787",
																	"type": "text"
																},
																{
																	"key": "relationship",
																	"value": "Friend",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "http://27.109.15.190:8088/v1/cooccupants",
															"protocol": "http",
															"host": [
																"27",
																"109",
																"15",
																"190"
															],
															"port": "8088",
															"path": [
																"v1",
																"cooccupants"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "access-control-allow-credentials",
															"value": "1",
															"name": "access-control-allow-credentials",
															"description": ""
														},
														{
															"key": "access-control-allow-headers",
															"value": "*",
															"name": "access-control-allow-headers",
															"description": ""
														},
														{
															"key": "access-control-allow-methods",
															"value": "GET, POST, PUT, DELETE, OPTIONS",
															"name": "access-control-allow-methods",
															"description": ""
														},
														{
															"key": "access-control-allow-origin",
															"value": "*",
															"name": "access-control-allow-origin",
															"description": ""
														},
														{
															"key": "cache-control",
															"value": "no-cache, private",
															"name": "cache-control",
															"description": ""
														},
														{
															"key": "connection",
															"value": "keep-alive",
															"name": "connection",
															"description": ""
														},
														{
															"key": "content-type",
															"value": "application/json",
															"name": "content-type",
															"description": ""
														},
														{
															"key": "date",
															"value": "Mon, 10 Sep 2018 12:48:26 GMT",
															"name": "date",
															"description": ""
														},
														{
															"key": "server",
															"value": "nginx/1.13.12",
															"name": "server",
															"description": ""
														},
														{
															"key": "transfer-encoding",
															"value": "chunked",
															"name": "transfer-encoding",
															"description": ""
														},
														{
															"key": "x-powered-by",
															"value": "PHP/7.2.3",
															"name": "x-powered-by",
															"description": ""
														},
														{
															"key": "x-ratelimit-limit",
															"value": "60",
															"name": "x-ratelimit-limit",
															"description": ""
														},
														{
															"key": "x-ratelimit-remaining",
															"value": "59",
															"name": "x-ratelimit-remaining",
															"description": ""
														}
													],
													"cookie": [],
													"body": "{\"status\":\"200\",\"messages\":\"Co-occupant Added Successfully.\",\"data\":{\"id\":54,\"firstname\":\"Test5\",\"lastname\":\"User5\",\"email\":\"developer+9999999@thirdrocktechkno.com\",\"age\":null,\"phonenumber\":\"6574124787\",\"relationship\":\"Friend\",\"user_id\":1,\"created_at\":\"2018-09-10 22:48:25\",\"updated_at\":\"2018-09-10 22:48:25\",\"user\":{\"id\":1,\"first_name\":\"Rahul\",\"last_name\":\"Riddhi\",\"email\":\"developer@thirdrocktechkno.com\",\"phone\":\"9687457485\",\"age\":\"26\",\"created_at\":\"2018-05-17 16:18:58\",\"updated_at\":\"2018-06-25 22:14:19\",\"pm\":0}}}"
												}
											]
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Get all co-occupant",
									"item": [
										{
											"name": "Co-occupant list",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ef7a559f-4639-4361-b65e-964bb53cbaad",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{ ",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Success\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.be.oneOf([\"Success\", \"No Co-occupants Found\"]);",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.get_cooccupants);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    var sort = require(\"lodash\");",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.test('Data are in Ascending order', function () {",
															"         if(jsonData.data.cooccupants_mapper.length > 0) {",
															"        array_id = [];",
															"        for(i=0; i<jsonData.data.cooccupants.length; i++){",
															"    var expectedSortedOrder = sort.orderBy(jsonData.data.cooccupants, ['id'], ['asc']);",
															"    pm.expect(jsonData.data.cooccupants).to.eql(expectedSortedOrder); ",
															"    array_id.push(jsonData.data.cooccupants[i].id);",
															"        }",
															"    console.log(array_id);",
															"    }",
															"  }",
															");",
															"",
															"    var sort = require(\"lodash\");",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.test('Data are in Ascending order', function () {",
															"        if(jsonData.data.cooccupants_mapper.length > 0) {",
															"        array_id1 = [];",
															"        for(i=0; i<jsonData.data.cooccupants_mapper.length; i++){",
															"    var expectedSortedOrder = sort.orderBy(jsonData.data.cooccupants_mapper, ['id'], ['asc']);",
															"    pm.expect(jsonData.data.cooccupants_mapper).to.eql(expectedSortedOrder); ",
															"    array_id1.push(jsonData.data.cooccupants_mapper[i].id);",
															"        }",
															"    console.log(array_id1);",
															"    }",
															"  }",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{dev}}/v1/cooccupants",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"cooccupants"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Update co-occupant",
									"item": [
										{
											"name": "Update co-occupant",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6ce14174-4dfd-4e1e-a88e-ff366ff7bb5d",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Co-occupant Updated Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Co-occupant Updated Successfully.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.update_cooccupant);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Co-occupant for User\", function () {",
															"\tvar data =(pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"    if(jsonData.data.length > 0) {",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));",
															"      array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"    }",
															"}); "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "firstname",
															"value": "Akash",
															"type": "text"
														},
														{
															"key": "lastname",
															"value": "Parmar",
															"type": "text"
														},
														{
															"key": "email",
															"value": "{{co-occupant_email}}",
															"type": "text"
														},
														{
															"key": "phonenumber",
															"value": "0987654321",
															"type": "text"
														},
														{
															"key": "relationship",
															"value": "Friendss",
															"type": "text"
														},
														{
															"key": "flag",
															"value": "0",
															"description": "pass flag = 1 if passing cooccupants_mapper object id in url\npass flag = 0 if passing cooccupants object id in url",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/cooccupants/{{co-occupant_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"cooccupants",
														"{{co-occupant_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update co-occupant mapper",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6ce14174-4dfd-4e1e-a88e-ff366ff7bb5d",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Co-occupant Updated Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Co-occupant Updated Successfully.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.update_cooccupant_mapper);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Co-occupant Mapper for User\", function () {",
															"\tvar data =(pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"    if(jsonData.data.length > 0) {",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));",
															"      array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"    }",
															"}); "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "firstname",
															"value": "Akash",
															"type": "text"
														},
														{
															"key": "lastname",
															"value": "Parmar",
															"type": "text"
														},
														{
															"key": "email",
															"value": "{{occupantmapper_email}}",
															"type": "text"
														},
														{
															"key": "phonenumber",
															"value": "0987654321",
															"type": "text"
														},
														{
															"key": "relationship",
															"value": "Friendss",
															"type": "text"
														},
														{
															"key": "flag",
															"value": "1",
															"description": "pass flag = 1 if passing cooccupants_mapper object id in url\npass flag = 0 if passing cooccupants object id in url",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/cooccupants/{{occupantmapper_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"cooccupants",
														"{{occupantmapper_id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete co-occupant",
									"item": [
										{
											"name": "Delete Co-occupant",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2e821a51-44f8-4ff0-92b3-bed8bb472d67",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Co-occupant Deleted Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.be.oneOf([\"Co-occupant Deleted Successfully.\", \"No such Co-occupant exist.\"]);",
															"        console.log(jsonData.data.agency_email);",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{dev}}/v1/deleteCooccupants/{{co-occupant_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"deleteCooccupants",
														"{{co-occupant_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete from co-occupant Mapper",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "54f255fa-009b-4154-b251-00290c508f80",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Co-occupant Deleted Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.be.oneOf([\"Co-occupant Deleted Successfully.\", \"No such Co-occupant exist.\"]);",
															"        console.log(jsonData.data.agency_email);",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{dev}}/v1/deleteCooccupantsMapper/{{occupantmapper_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"deleteCooccupantsMapper",
														"{{occupantmapper_id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "When co-occupant does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1df23a30-9add-49ff-b60e-c309dda90ca6",
												"exec": [
													"pm.test(\"Status code is 200 or OK\", function() {",
													"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Success status : 200\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"200\");",
													"});",
													"",
													"pm.test(\"Success message : No Co-occupants Found\", function() {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"No Co-occupants Found\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.delete);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});",
													"",
													"    pm.test(\"JSON data is empty\", function () {",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tenant_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{dev}}/v1/cooccupants",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"cooccupants"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e145e078-7ecc-48df-b6d4-a7b45305834e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8b8cbfb6-ffb6-4f59-b3b1-a81e1fc0f260",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Dependants",
							"item": [
								{
									"name": "Add Dependent",
									"item": [
										{
											"name": "Add dependant",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "565820c0-69b6-49bf-b95a-1fb1f25d05aa",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Dependent Added Successfully.\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Dependent Added Successfully.\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.environment.set(\"dependent_id\", jsonData.data.id);",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.add_dependent);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"value": "Akash",
															"type": "text"
														},
														{
															"key": "age",
															"value": "23",
															"type": "text"
														},
														{
															"key": "relationship",
															"value": "Brother",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/dependants",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"dependants"
													]
												}
											},
											"response": []
										},
										{
											"name": "If age is greater than 100",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "565820c0-69b6-49bf-b95a-1fb1f25d05aa",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Reques\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Error message : Error\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Error\");",
															"});",
															"",
															"pm.test(\"Error message : The age may not be greater than 100.\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.age[0]).to.eql(\"The age may not be greater than 100.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.age_greater_than_100);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"value": "rim",
															"type": "text"
														},
														{
															"key": "age",
															"value": "220",
															"type": "text"
														},
														{
															"key": "relationship",
															"value": "sister",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/dependants",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"dependants"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant does not enter required field",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "70d0a8f3-2885-455d-83f8-3322de58ec53",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Error message : Error\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Error\");",
															"});",
															"",
															"pm.test(\"Error message : The name field is required.\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.name[0]).to.eql(\"The name field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The age field is required.\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.age[0]).to.eql(\"The age field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The relationship field is required.\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.relationship[0]).to.eql(\"The relationship field is required.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.missing_field_in_dependent);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "name",
															"value": "",
															"type": "text"
														},
														{
															"key": "age",
															"value": "",
															"type": "text"
														},
														{
															"key": "relationship",
															"value": "",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/dependants",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"dependants"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Get all dependent",
									"item": [
										{
											"name": "Get all dependents list",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c9d0e782-4d43-45f7-971f-0432601a3f33",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"  ",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Success\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Success\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.get_dependents);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Dependents for User\", function () {",
															"    var data =(pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));",
															"      array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"});",
															"",
															"    var sort = require(\"lodash\");",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.test('Data are in Sorted order', function () {",
															"        if(jsonData.length > 0) {",
															"        array_id = [];",
															"        for(i=0; i<jsonData.data.length; i++){",
															"    var expectedSortedOrder = sort.orderBy(jsonData.data, ['id'], ['asc']);",
															"    pm.expect(jsonData.data).to.eql(expectedSortedOrder); ",
															"    array_id.push(jsonData.data[i].id);",
															"        }",
															"    console.log(array_id);",
															"    }",
															"  }",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{dev}}/v1/dependants",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"dependants"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Update dependent",
									"item": [
										{
											"name": "Update dependant",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "70d0a8f3-2885-455d-83f8-3322de58ec53",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Dependent Updated Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Dependent Updated Successfully.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.update_dependent);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Dependent for User\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"        pm.expect(jsonData.data.user_id).to.eql(pm.environment.get(\"tenant_id\"));",
															"      console.log(jsonData.data.user_id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "name",
															"value": "Riddhi",
															"type": "text"
														},
														{
															"key": "age",
															"value": "26",
															"type": "text"
														},
														{
															"key": "relationship",
															"value": "Friend",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/dependants/{{dependent_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"dependants",
														"{{dependent_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "If age is greater than 100",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "70d0a8f3-2885-455d-83f8-3322de58ec53",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Error message : Error\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Error\");",
															"});",
															"",
															"pm.test(\"Error message : The age may not be greater than 100.\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.age[0]).to.eql(\"The age may not be greater than 100.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.age_greater_than_100);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "name",
															"value": "Riddhi",
															"type": "text"
														},
														{
															"key": "age",
															"value": "266",
															"type": "text"
														},
														{
															"key": "relationship",
															"value": "Friend",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/dependants/{{dependent_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"dependants",
														"{{dependent_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant does not enter required field",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "70d0a8f3-2885-455d-83f8-3322de58ec53",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Error message : Error\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Error\");",
															"});",
															"",
															"pm.test(\"Error message : The name field is required.\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.name[0]).to.eql(\"The name field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The age field is required.\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.age[0]).to.eql(\"The age field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The relationship field is required.\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.relationship[0]).to.eql(\"The relationship field is required.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.missing_field_in_dependent);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "name",
															"value": "",
															"type": "text"
														},
														{
															"key": "age",
															"value": "",
															"type": "text"
														},
														{
															"key": "relationship",
															"value": "",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/dependants/{{dependent_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"dependants",
														"{{dependent_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "If dependent id does not exist",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "70d0a8f3-2885-455d-83f8-3322de58ec53",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Success message : No Such Dependent Exist.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"No Such Dependent Exist.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "name",
															"value": "Janvi",
															"type": "text"
														},
														{
															"key": "age",
															"value": "23",
															"type": "text"
														},
														{
															"key": "relationship",
															"value": "sister",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/dependants/111111",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"dependants",
														"111111"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete dependent",
									"item": [
										{
											"name": "Delete dependant",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fe01f0f1-6fc8-4d34-95ae-9c8e5deac51f",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Dependent Deleted Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Dependent Deleted Successfully.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{dev}}/v1/dependants/{{dependent_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"dependants",
														"{{dependent_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "If dependent id does not exist",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fe01f0f1-6fc8-4d34-95ae-9c8e5deac51f",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Success message : No Such Dependent Exist.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"No Such Dependent Exist.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{dev}}/v1/dependants/{{dependent_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"dependants",
														"{{dependent_id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "If dependent does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c9d0e782-4d43-45f7-971f-0432601a3f33",
												"exec": [
													"pm.test(\"Status code is 200 or OK\", function() {",
													"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Success status : 200\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"200\");",
													"});",
													"",
													"pm.test(\"Success message : No dependents Found\", function() {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"No dependents Found\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.existing_email);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});",
													"",
													"    pm.test(\"JSON data is empty\", function () {",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tenant_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{dev}}/v1/dependants",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"dependants"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "99f4f51f-43dd-4af0-b5d5-d0484928186d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "71d05220-b8cd-447a-ac58-3de98196bbfe",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Pets",
							"item": [
								{
									"name": "Add pet",
									"item": [
										{
											"name": "Add pet",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "246b176c-9e14-4753-a8b2-6c3fc3cb4ade",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Pet Added Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Pet Added Successfully.\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.environment.set(\"pet_id\", jsonData.data.id);",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.add_pet);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Pet added for User\", function () {",
															"    var data = (pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"        pm.expect(jsonData.data.user_id).to.eql(parseInt(data));",
															"      console.log(jsonData.data.user_id);",
															"}); "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"value": "Bruno",
															"type": "text"
														},
														{
															"key": "registrationNumber",
															"value": "RU70W",
															"type": "text"
														},
														{
															"key": "type",
															"value": "dog",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/pets",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"pets"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant does not enter required fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "246b176c-9e14-4753-a8b2-6c3fc3cb4ade",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Success message : The name field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.name[0]).to.eql(\"The name field is required.\");",
															"});",
															"",
															"pm.test(\"Success message : The type field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.type[0]).to.eql(\"The type field is required.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.missing_field_in_pets);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "name",
															"value": "",
															"type": "text"
														},
														{
															"key": "registrationNumber",
															"value": "RU70W",
															"type": "text"
														},
														{
															"key": "type",
															"value": "",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/pets",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"pets"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Get all pet",
									"item": [
										{
											"name": "Pet listing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a7633467-38a7-476b-875e-2ce7b2317a65",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Success\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Success\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.get_pet);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Pets for User\", function () {",
															"    var data =(pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"    if(jsonData.data.length > 0) {",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));",
															"      array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"    }",
															"});",
															"",
															"    var sort = require(\"lodash\");",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.test('Data are in Ascending order', function () {",
															"        if(jsonData.data.length > 0) {",
															"        array_id = [];",
															"        for(i=0; i<jsonData.data.length; i++){",
															"    var expectedSortedOrder = sort.orderBy(jsonData.data, ['id'], ['asc']);",
															"    pm.expect(jsonData.data).to.eql(expectedSortedOrder); ",
															"    array_id.push(jsonData.data[i].id);",
															"        }",
															"    console.log(array_id);",
															"    }",
															"  }",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													},
													{
														"key": "Origin",
														"value": "file://",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{dev}}/v1/pets",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"pets"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Update pet",
									"item": [
										{
											"name": "Update pet",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5eaf0b32-51e2-4c9b-943a-aed78d1b3754",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Pet Updated Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Pet Updated Successfully.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.update_pet);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Pets for User\", function () {",
															"    var data =(pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));",
															"      array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "name",
															"value": "Brownie",
															"type": "text"
														},
														{
															"key": "type",
															"value": "Dog",
															"type": "text"
														},
														{
															"key": "registrationNumber",
															"value": "",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/pets/{{pet_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"pets",
														"{{pet_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "If pet id does not exist",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5eaf0b32-51e2-4c9b-943a-aed78d1b3754",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : No such pet exist.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"No such pet exist.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "name",
															"value": "Brownie",
															"type": "text"
														},
														{
															"key": "type",
															"value": "Dog",
															"type": "text"
														},
														{
															"key": "registrationNumber",
															"value": "",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/pets/111111",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"pets",
														"111111"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete pet",
									"item": [
										{
											"name": "Delete Pet",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8dda9a2c-b3b6-4b80-918b-b6315b15f378",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Pet Deleted Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Pet Deleted Successfully.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{dev}}/v1/pets/{{pet_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"pets",
														"{{pet_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "If pet id does not exist",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8dda9a2c-b3b6-4b80-918b-b6315b15f378",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Success message : No such pet exist.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"No such pet exist.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{dev}}/v1/pets/{{pet_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"pets",
														"{{pet_id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "If Pet does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7633467-38a7-476b-875e-2ce7b2317a65",
												"exec": [
													"pm.test(\"Status code is 200 or OK\", function() {",
													"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Success status : 200\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"200\");",
													"});",
													"",
													"pm.test(\"Success message : No data Found\", function() {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"No data Found\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.existing_email);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});",
													"",
													"    pm.test(\"JSON data is empty\", function () {",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tenant_token}}"
											},
											{
												"key": "Origin",
												"type": "text",
												"value": "file://"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{dev}}/v1/pets",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"pets"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5506bbec-3b52-479f-bcae-6aa40be92595",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "659bdc86-2210-4f31-ad6d-10f0ad369bde",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Get employment type list",
							"item": [
								{
									"name": "Get employment types list",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9af8b354-c832-4b2a-8c58-f99e16b19afe",
												"exec": [
													"pm.test(\"Status code is 200 or OK\", function() {",
													"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Success status : 200\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"200\");",
													"});",
													"",
													"pm.test(\"Success message : Success\", function() {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"Success\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"employment_type_id\", jsonData.data[0].id);",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.get_emply_type);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});",
													"",
													"    var sort = require(\"lodash\");",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.test('Data are in Ascending order', function () {",
													"        if(jsonData.data.length > 0) {",
													"        array_id = [];",
													"        for(i=0; i<jsonData.data.length; i++){",
													"    var expectedSortedOrder = sort.orderBy(jsonData.data, ['id'], ['asc']);",
													"    pm.expect(jsonData.data).to.eql(expectedSortedOrder); ",
													"    array_id.push(jsonData.data[i].id);",
													"        }",
													"    console.log(array_id);",
													"    }",
													"  }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tenant_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{dev}}/v1/getEmploymentTypes",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"getEmploymentTypes"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f519aa3d-c28a-46bc-bd63-37e3ae6b8711",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "112649a0-589f-4bcf-99ed-9e05024190b2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Employment history",
							"item": [
								{
									"name": "Create employment history",
									"item": [
										{
											"name": "Create employment history",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bebe2bce-1517-4c44-b335-7f4333de5899",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Employment Added Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Employment Added Successfully.\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.environment.set(\"employment_id\", jsonData.data.id);",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.add_emply_history);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Employment history for User\", function () {",
															"    var data =(pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"    if(jsonData.data.length > 0) {",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));",
															"      array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "employer",
															"value": "Abhilash Shettigar",
															"type": "text"
														},
														{
															"key": "position",
															"value": "Sr QA",
															"type": "text"
														},
														{
															"key": "employment_type_id",
															"value": "1",
															"type": "text"
														},
														{
															"key": "salary",
															"value": "20000",
															"type": "text"
														},
														{
															"key": "supervisor",
															"value": "Tapan Patel",
															"type": "text"
														},
														{
															"key": "phone",
															"value": "0123456789",
															"type": "text"
														},
														{
															"key": "start_date",
															"value": "2016-06-01",
															"type": "text"
														},
														{
															"key": "end_date",
															"value": "2018-06-01",
															"type": "text"
														},
														{
															"key": "current",
															"value": "0",
															"description": "0--> not current , 1--> current,\nif pass 0 then end_date is required and if passed 1 then not required",
															"type": "text"
														},
														{
															"key": "employer_email",
															"value": "abhilashs@gmail.com",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/employmentHistory",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"employmentHistory"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant enter start date greater than current date",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bebe2bce-1517-4c44-b335-7f4333de5899",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Error status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Error message : Error\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Error\");",
															"});",
															"",
															"pm.test(\"Error message : The start date must be a date before tomorrow.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.start_date[0]).to.eql(\"The start date must be a date before tomorrow.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.startdate_greater_than_today);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "employer",
															"value": "Abhilash Shettigar",
															"type": "text"
														},
														{
															"key": "position",
															"value": "Sr QA",
															"type": "text"
														},
														{
															"key": "employment_type_id",
															"value": "1",
															"type": "text"
														},
														{
															"key": "salary",
															"value": "20000",
															"type": "text"
														},
														{
															"key": "supervisor",
															"value": "Tapan Patel",
															"type": "text"
														},
														{
															"key": "phone",
															"value": "0123456789",
															"type": "text"
														},
														{
															"key": "start_date",
															"value": "2030-06-01",
															"type": "text"
														},
														{
															"key": "end_date",
															"value": "",
															"type": "text"
														},
														{
															"key": "current",
															"value": "1",
															"description": "0--> not current , 1--> current,\nif pass 0 then end_date is required and if passed 1 then not required",
															"type": "text"
														},
														{
															"key": "employer_email",
															"value": "abhilashs@gmail.com",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/employmentHistory",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"employmentHistory"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant does not enter valid phone number",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bebe2bce-1517-4c44-b335-7f4333de5899",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Success message : Error\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Error\");",
															"});",
															"",
															"pm.test(\"Success message : The provided phone number must be the full number, with area codes and no spaces.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.phone[0]).to.eql(\"The provided phone number must be the full number, with area codes and no spaces.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.missing_phone_number);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "employer",
															"value": "shiv",
															"type": "text"
														},
														{
															"key": "position",
															"value": "Sr Developer",
															"type": "text"
														},
														{
															"key": "employment_type_id",
															"value": "1",
															"type": "text"
														},
														{
															"key": "salary",
															"value": "20000",
															"type": "text"
														},
														{
															"key": "supervisor",
															"value": "Rahul Mehta",
															"type": "text"
														},
														{
															"key": "phone",
															"value": "012345678",
															"type": "text"
														},
														{
															"key": "start_date",
															"value": "2016-06-01",
															"type": "text"
														},
														{
															"key": "end_date",
															"value": "",
															"type": "text"
														},
														{
															"key": "current",
															"value": "1",
															"description": "0--> not current , 1--> current,\nif pass 0 then end_date is required and if passed 1 then not required",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/employmentHistory",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"employmentHistory"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant does not enter required field",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bebe2bce-1517-4c44-b335-7f4333de5899",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Error message : The current field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.current[0]).to.eql(\"The current field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The employer field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.employer[0]).to.eql(\"The employer field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The position field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.position[0]).to.eql(\"The position field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The employment type id field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.employment_type_id[0]).to.eql(\"The employment type id field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The salary field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.salary[0]).to.eql(\"The salary field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The supervisor field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.supervisor[0]).to.eql(\"The supervisor field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The phone field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.phone[0]).to.eql(\"The phone field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The start date field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.start_date[0]).to.eql(\"The start date field is required.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.missing_field_in_emplyement);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "employer",
															"value": "",
															"type": "text"
														},
														{
															"key": "position",
															"value": "",
															"type": "text"
														},
														{
															"key": "employment_type_id",
															"value": "",
															"type": "text"
														},
														{
															"key": "salary",
															"value": "",
															"type": "text"
														},
														{
															"key": "supervisor",
															"value": "",
															"type": "text"
														},
														{
															"key": "phone",
															"value": "",
															"type": "text"
														},
														{
															"key": "start_date",
															"value": "",
															"type": "text"
														},
														{
															"key": "end_date",
															"value": "2016-06-01",
															"type": "text"
														},
														{
															"key": "current",
															"value": "",
															"description": "0--> not current , 1--> current,\nif pass 0 then end_date is required and if passed 1 then not required",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/employmentHistory",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"employmentHistory"
													]
												}
											},
											"response": []
										},
										{
											"name": "If current flag is 0 and tenant does not enter required field",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bebe2bce-1517-4c44-b335-7f4333de5899",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Error message : Error\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Error\");",
															"});",
															"",
															"pm.test(\"Error message : The phone field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.phone[0]).to.eql(\"The phone field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The end date field is required when current is 0.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.end_date[0]).to.eql(\"The end date field is required when current is 0.\");",
															"});",
															"",
															"pm.test(\"Error message : The employer field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.employer[0]).to.eql(\"The employer field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The position field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.position[0]).to.eql(\"The position field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The employment type id field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.employment_type_id[0]).to.eql(\"The employment type id field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The salary field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.salary[0]).to.eql(\"The salary field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The supervisor field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.supervisor[0]).to.eql(\"The supervisor field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The start date field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.start_date[0]).to.eql(\"The start date field is required.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.missing_field_in_emplyement1);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "employer",
															"value": "",
															"type": "text"
														},
														{
															"key": "position",
															"value": "",
															"type": "text"
														},
														{
															"key": "employment_type_id",
															"value": "",
															"type": "text"
														},
														{
															"key": "salary",
															"value": "",
															"type": "text"
														},
														{
															"key": "supervisor",
															"value": "",
															"type": "text"
														},
														{
															"key": "phone",
															"value": "",
															"type": "text"
														},
														{
															"key": "start_date",
															"value": "",
															"type": "text"
														},
														{
															"key": "end_date",
															"value": "",
															"type": "text"
														},
														{
															"key": "current",
															"value": "0",
															"description": "0--> not current , 1--> current,\nif pass 0 then end_date is required and if passed 1 then not required",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/employmentHistory",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"employmentHistory"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Get all employment history",
									"item": [
										{
											"name": "Get all employment history",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "12c06f1b-9478-48b5-a155-3cd2b33361aa",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Success\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.be.oneOf([\"Success\", \"No data Found\"]);",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.get_emply_history);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Employment history for User\", function () {",
															"    var data =(pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"    if(jsonData.data.length > 0) {",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));",
															"      array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"    }",
															"});",
															"",
															"    var sort = require(\"lodash\");",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.test('Data are in Ascending order', function () {",
															"        if(jsonData.data.length > 0) {",
															"        array_id = [];",
															"        for(i=0; i<jsonData.data.length; i++){",
															"    var expectedSortedOrder = sort.orderBy(jsonData.data, ['id'], ['asc']);",
															"    pm.expect(jsonData.data).to.eql(expectedSortedOrder); ",
															"    array_id.push(jsonData.data[i].id);",
															"        }",
															"    console.log(array_id);",
															"    }",
															"  }",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{dev}}/v1/employmentHistory",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"employmentHistory"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Update employment history",
									"item": [
										{
											"name": "Update Employment History",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1fcdb6fc-478c-47c6-ad22-aa26ee289483",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {\r",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Success status : 200\", function () \r",
															"{\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"200\");\r",
															"});\r",
															"\r",
															"pm.test(\"Success message : Employment Updated Successfully.\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.messages).to.eql(\"Employment Updated Successfully.\");\r",
															"});\r",
															"\r",
															"    pm.test(\"JSON schema validation\", function() {    \r",
															"    var schema = JSON.parse(environment.update_emply_history);\r",
															"    var jsonData = JSON.parse(responseBody);\r",
															"    var result = tv4.validate(jsonData, schema, false, true);\r",
															"    if (result !== true) {\r",
															"        console.log('Schema validation failed:', tv4.error);\r",
															"        console.log(tv4.error.dataPath);\r",
															"    }\r",
															"    pm.expect(result).to.be.true;\r",
															"});\r",
															"\r",
															"    pm.test(\"Employment history for User\", function () {\r",
															"    var data =(pm.environment.get(\"tenant_id\"));\r",
															"    var jsonData = JSON.parse(responseBody);\r",
															"    if(jsonData.data.length > 0) {\r",
															"    array_tenant_id = [];\r",
															"    for(i=0; i<jsonData.data.length; i++){\r",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));\r",
															"      array_tenant_id.push(jsonData.data[i].user_id);\r",
															"    }\r",
															"    console.log(array_tenant_id);\r",
															"    }\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "employer",
															"value": "Eclinical Worksssssssssssss",
															"type": "text"
														},
														{
															"key": "position",
															"value": "Senior Developer",
															"type": "text"
														},
														{
															"key": "employment_type_id",
															"value": "1",
															"type": "text"
														},
														{
															"key": "salary",
															"value": "25000",
															"type": "text"
														},
														{
															"key": "supervisor",
															"value": "Janvi Bhuva",
															"type": "text"
														},
														{
															"key": "phone",
															"value": "0866968574",
															"type": "text"
														},
														{
															"key": "start_date",
															"value": "2017-01-01",
															"type": "text"
														},
														{
															"key": "end_date",
															"value": "2019-01-01",
															"type": "text"
														},
														{
															"key": "current",
															"value": "0",
															"description": "0--> not current , 1--> current,\nif pass 0 then end_date is required and if passed 1 then not required",
															"type": "text"
														},
														{
															"key": "employer_email",
															"value": "saryul@gmail.com",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/employmentHistory/{{employment_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"employmentHistory",
														"{{employment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant does not enter valid phone number",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1fcdb6fc-478c-47c6-ad22-aa26ee289483",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {\r",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Success status : 400\", function () \r",
															"{\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"400\");\r",
															"});\r",
															"\r",
															"pm.test(\"Error message : Error\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.messages).to.eql(\"Error\");\r",
															"});\r",
															"\r",
															"pm.test(\"Error message : The provided phone number must be the full number, with area codes and no spaces.\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.phone[0]).to.eql(\"The provided phone number must be the full number, with area codes and no spaces.\");\r",
															"});\r",
															"\r",
															"    pm.test(\"JSON schema validation\", function() {    \r",
															"    var schema = JSON.parse(environment.missing_phone_number);\r",
															"    var jsonData = JSON.parse(responseBody);\r",
															"    var result = tv4.validate(jsonData, schema, false, true);\r",
															"    if (result !== true) {\r",
															"        console.log('Schema validation failed:', tv4.error);\r",
															"        console.log(tv4.error.dataPath);\r",
															"    }\r",
															"    pm.expect(result).to.be.true;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "employer",
															"value": "Eclinical Worksssssssssssss",
															"type": "text"
														},
														{
															"key": "position",
															"value": "Senior Developer",
															"type": "text"
														},
														{
															"key": "employment_type_id",
															"value": "1",
															"type": "text"
														},
														{
															"key": "salary",
															"value": "25000",
															"type": "text"
														},
														{
															"key": "supervisor",
															"value": "Janvi Bhuva",
															"type": "text"
														},
														{
															"key": "phone",
															"value": "8866968574",
															"type": "text"
														},
														{
															"key": "start_date",
															"value": "2017-01-01",
															"type": "text"
														},
														{
															"key": "end_date",
															"value": "2019-01-01",
															"type": "text"
														},
														{
															"key": "current",
															"value": "0",
															"description": "0--> not current , 1--> current,\nif pass 0 then end_date is required and if passed 1 then not required",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/employmentHistory/{{employment_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"employmentHistory",
														"{{employment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant does not enter required field",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1fcdb6fc-478c-47c6-ad22-aa26ee289483",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {\r",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Success status : 400\", function () \r",
															"{\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"400\");\r",
															"});\r",
															"\r",
															"pm.test(\"Error message : Error\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.messages).to.eql(\"Error\");\r",
															"});\r",
															"\r",
															"pm.test(\"Error message : The phone field is required.\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.phone[0]).to.eql(\"The phone field is required.\");\r",
															"});\r",
															"\r",
															"pm.test(\"Error message : The current field is required.\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.current[0]).to.eql(\"The current field is required.\");\r",
															"});\r",
															"\r",
															"pm.test(\"Error message : The employer field is required.\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.employer[0]).to.eql(\"The employer field is required.\");\r",
															"});\r",
															"\r",
															"pm.test(\"Error message : The position field is required.\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.position[0]).to.eql(\"The position field is required.\");\r",
															"});\r",
															"\r",
															"pm.test(\"Error message : The employment type id field is required.\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.employment_type_id[0]).to.eql(\"The employment type id field is required.\");\r",
															"});\r",
															"\r",
															"pm.test(\"Error message : The salary field is required.\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.salary[0]).to.eql(\"The salary field is required.\");\r",
															"});\r",
															"\r",
															"pm.test(\"Error message : The supervisor field is required.\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.supervisor[0]).to.eql(\"The supervisor field is required.\");\r",
															"});\r",
															"\r",
															"pm.test(\"Error message : The start date field is required.\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.start_date[0]).to.eql(\"The start date field is required.\");\r",
															"});\r",
															"\r",
															"    pm.test(\"JSON schema validation\", function() {    \r",
															"    var schema = JSON.parse(environment.missing_field_in_emplyement);\r",
															"    var jsonData = JSON.parse(responseBody);\r",
															"    var result = tv4.validate(jsonData, schema, false, true);\r",
															"    if (result !== true) {\r",
															"        console.log('Schema validation failed:', tv4.error);\r",
															"        console.log(tv4.error.dataPath);\r",
															"    }\r",
															"    pm.expect(result).to.be.true;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "employer",
															"value": "",
															"type": "text"
														},
														{
															"key": "position",
															"value": "",
															"type": "text"
														},
														{
															"key": "employment_type_id",
															"value": "",
															"type": "text"
														},
														{
															"key": "salary",
															"value": "",
															"type": "text"
														},
														{
															"key": "supervisor",
															"value": "",
															"type": "text"
														},
														{
															"key": "phone",
															"value": "",
															"type": "text"
														},
														{
															"key": "start_date",
															"value": "",
															"type": "text"
														},
														{
															"key": "end_date",
															"value": "",
															"type": "text"
														},
														{
															"key": "current",
															"value": "",
															"description": "0--> not current , 1--> current,\nif pass 0 then end_date is required and if passed 1 then not required",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/employmentHistory/{{employment_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"employmentHistory",
														"{{employment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "If current flag is 0 and tenant does not enter required field",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1fcdb6fc-478c-47c6-ad22-aa26ee289483",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Error message : Error\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Error\");",
															"});",
															"",
															"pm.test(\"Error message : The phone field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.phone[0]).to.eql(\"The phone field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The end date field is required when current is 0.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.end_date[0]).to.eql(\"The end date field is required when current is 0.\");",
															"});",
															"",
															"pm.test(\"Error message : The employer field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.employer[0]).to.eql(\"The employer field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The position field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.position[0]).to.eql(\"The position field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The employment type id field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.employment_type_id[0]).to.eql(\"The employment type id field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The salary field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.salary[0]).to.eql(\"The salary field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The supervisor field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.supervisor[0]).to.eql(\"The supervisor field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The start date field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.start_date[0]).to.eql(\"The start date field is required.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.missing_field_in_emplyement1);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "employer",
															"value": "",
															"type": "text"
														},
														{
															"key": "position",
															"value": "",
															"type": "text"
														},
														{
															"key": "employment_type_id",
															"value": "",
															"type": "text"
														},
														{
															"key": "salary",
															"value": "",
															"type": "text"
														},
														{
															"key": "supervisor",
															"value": "",
															"type": "text"
														},
														{
															"key": "phone",
															"value": "",
															"type": "text"
														},
														{
															"key": "start_date",
															"value": "",
															"type": "text"
														},
														{
															"key": "end_date",
															"value": "",
															"type": "text"
														},
														{
															"key": "current",
															"value": "0",
															"description": "0--> not current , 1--> current,\nif pass 0 then end_date is required and if passed 1 then not required",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/employmentHistory/{{employment_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"employmentHistory",
														"{{employment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete employment history",
									"item": [
										{
											"name": "Delete employment history",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0509738c-4c4c-4d89-b4b3-1ec47f4b6dfd",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Employment Deleted Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Employment Deleted Successfully.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{dev}}/v1/employmentHistory/{{employment_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"employmentHistory",
														"{{employment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "If employment id does not exist",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0509738c-4c4c-4d89-b4b3-1ec47f4b6dfd",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Success message : Employment Deleted Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"No Such Employment Exist.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{dev}}/v1/employmentHistory/1",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"employmentHistory",
														"1"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "If employment history does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af2a69cd-1244-42c9-9e87-61ce88f8d0c7",
												"exec": [
													"pm.test(\"Status code is 200 or OK\", function() {",
													"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Success status : 200\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"200\");",
													"});",
													"",
													"pm.test(\"Success message : No Employment History Found\", function() {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"No Employment History Found\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.existing_email);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});",
													"",
													"    pm.test(\"JSON data is empty\", function () {",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tenant_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{dev}}/v1/employmentHistory",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"employmentHistory"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7481ccca-af1e-4105-9bdd-94b278196449",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "069372cf-c76e-4257-b272-dce0f7dc24b4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Self-employed history",
							"item": [
								{
									"name": "Create self employed history",
									"item": [
										{
											"name": "Create self employment history",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b5de06d5-eaa6-4cf7-9150-e50727c2bf35",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Self Employment Added Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Self Employment Added Successfully.\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.environment.set(\"self-employed_id\", jsonData.data.id);",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.add_self_emply_history);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Employment history for User\", function () {",
															"    var data =(pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"    if(jsonData.data.length > 0) {",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));",
															"      array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "employer",
															"value": "JAnvi Bhuva",
															"type": "text"
														},
														{
															"key": "position",
															"value": "QA",
															"type": "text"
														},
														{
															"key": "abn_number",
															"value": "92 624 612 752",
															"type": "text"
														},
														{
															"key": "acn_number",
															"value": "003 500 009",
															"type": "text"
														},
														{
															"key": "salary",
															"value": "50000",
															"type": "text"
														},
														{
															"key": "start_date",
															"value": "2016-06-01",
															"type": "text"
														},
														{
															"key": "end_date",
															"value": "2019-06-01",
															"type": "text"
														},
														{
															"key": "current",
															"value": "0",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/selfemploymentHistory",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"selfemploymentHistory"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant does not enter required field",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b5de06d5-eaa6-4cf7-9150-e50727c2bf35",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Error message : Error\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Error\");",
															"});",
															"",
															"pm.test(\"Error message : The employer field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.employer[0]).to.eql(\"The employer field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The position field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.position[0]).to.eql(\"The position field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The salary field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.salary[0]).to.eql(\"The salary field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The start date field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.start_date[0]).to.eql(\"The start date field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The current field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.current[0]).to.eql(\"The current field is required.\");",
															"});",
															"",
															"var schema =",
															"{",
															"  \"type\": \"object\",",
															"  \"properties\": {",
															"    \"status\": {",
															"      \"type\": \"string\"",
															"    },",
															"    \"messages\": {",
															"      \"type\": \"string\"",
															"    },",
															"    \"data\": {",
															"      \"type\": \"object\",",
															"      \"properties\": {",
															"        \"employer\": {",
															"          \"type\": \"array\",",
															"          \"items\": [",
															"            {",
															"              \"type\": \"string\"",
															"            }",
															"          ]",
															"        },",
															"        \"position\": {",
															"          \"type\": \"array\",",
															"          \"items\": [",
															"            {",
															"              \"type\": \"string\"",
															"            }",
															"          ]",
															"        },",
															"        \"salary\": {",
															"          \"type\": \"array\",",
															"          \"items\": [",
															"            {",
															"              \"type\": \"string\"",
															"            }",
															"          ]",
															"        },",
															"        \"start_date\": {",
															"          \"type\": \"array\",",
															"          \"items\": [",
															"            {",
															"              \"type\": \"string\"",
															"            }",
															"          ]",
															"        },",
															"        \"current\": {",
															"          \"type\": \"array\",",
															"          \"items\": [",
															"            {",
															"              \"type\": \"string\"",
															"            }",
															"          ]",
															"        }",
															"      },",
															"      \"required\": [",
															"        \"employer\",",
															"        \"position\",",
															"        \"salary\",",
															"        \"start_date\",",
															"        \"current\"",
															"      ]",
															"    }",
															"  },",
															"  \"required\": [",
															"    \"status\",",
															"    \"messages\",",
															"    \"data\"",
															"  ]",
															"};",
															"",
															"    pm.test(\"JSON schema validation\", function() {",
															"    var jsonData = pm.response.json();",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "employer",
															"value": "",
															"type": "text"
														},
														{
															"key": "position",
															"value": "",
															"type": "text"
														},
														{
															"key": "abn_number",
															"value": "003 500 00",
															"type": "text"
														},
														{
															"key": "acn_number",
															"value": "003 500 00",
															"type": "text"
														},
														{
															"key": "salary",
															"value": "",
															"type": "text"
														},
														{
															"key": "start_date",
															"value": "",
															"type": "text"
														},
														{
															"key": "end_date",
															"value": "",
															"type": "text"
														},
														{
															"key": "current",
															"value": "",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/selfemploymentHistory",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"selfemploymentHistory"
													]
												}
											},
											"response": []
										},
										{
											"name": "If current flag is 0 and tenant does not enter required field",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b5de06d5-eaa6-4cf7-9150-e50727c2bf35",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Error message : Error\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Error\");",
															"});",
															"",
															"pm.test(\"Error message : The employer field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.employer[0]).to.eql(\"The employer field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The position field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.position[0]).to.eql(\"The position field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The salary field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.salary[0]).to.eql(\"The salary field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The start date field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.start_date[0]).to.eql(\"The start date field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The end date field is required when current is 0.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.end_date[0]).to.eql(\"The end date field is required when current is 0.\");",
															"});",
															"",
															"var schema =",
															"{",
															"  \"type\": \"object\",",
															"  \"properties\": {",
															"    \"status\": {",
															"      \"type\": \"string\"",
															"    },",
															"    \"messages\": {",
															"      \"type\": \"string\"",
															"    },",
															"    \"data\": {",
															"      \"type\": \"object\",",
															"      \"properties\": {",
															"        \"employer\": {",
															"          \"type\": \"array\",",
															"          \"items\": [",
															"            {",
															"              \"type\": \"string\"",
															"            }",
															"          ]",
															"        },",
															"        \"position\": {",
															"          \"type\": \"array\",",
															"          \"items\": [",
															"            {",
															"              \"type\": \"string\"",
															"            }",
															"          ]",
															"        },",
															"        \"salary\": {",
															"          \"type\": \"array\",",
															"          \"items\": [",
															"            {",
															"              \"type\": \"string\"",
															"            }",
															"          ]",
															"        },",
															"        \"start_date\": {",
															"          \"type\": \"array\",",
															"          \"items\": [",
															"            {",
															"              \"type\": \"string\"",
															"            }",
															"          ]",
															"        },",
															"        \"end_date\": {",
															"          \"type\": \"array\",",
															"          \"items\": [",
															"            {",
															"              \"type\": \"string\"",
															"            }",
															"          ]",
															"        }",
															"      },",
															"      \"required\": [",
															"        \"employer\",",
															"        \"position\",",
															"        \"salary\",",
															"        \"start_date\",",
															"        \"end_date\"",
															"      ]",
															"    }",
															"  },",
															"  \"required\": [",
															"    \"status\",",
															"    \"messages\",",
															"    \"data\"",
															"  ]",
															"};",
															"",
															"    pm.test(\"JSON schema validation\", function() {",
															"    var jsonData = pm.response.json();",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "employer",
															"value": "",
															"type": "text"
														},
														{
															"key": "position",
															"value": "",
															"type": "text"
														},
														{
															"key": "abn_number",
															"value": "003 500 00",
															"type": "text"
														},
														{
															"key": "acn_number",
															"value": "003 500 00",
															"type": "text"
														},
														{
															"key": "salary",
															"value": "",
															"type": "text"
														},
														{
															"key": "start_date",
															"value": "",
															"type": "text"
														},
														{
															"key": "end_date",
															"value": "",
															"type": "text"
														},
														{
															"key": "current",
															"value": "0",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/selfemploymentHistory",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"selfemploymentHistory"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Get self employed history",
									"item": [
										{
											"name": "Self Employment History",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "20f6ab6a-72c4-4b3b-8a5b-5eedc25c8600",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Success\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.be.oneOf([\"Success\", \"No data Found\"]);",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.get_self_emply_history);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Employment history for User\", function () {",
															"    var data =(pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"    if(jsonData.data.length > 0) {",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));",
															"      array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"    }",
															"});",
															"",
															"    var sort = require(\"lodash\");",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.test('Data are in Ascending order', function () {",
															"        if(jsonData.data.length > 0) {",
															"        array_id = [];",
															"        for(i=0; i<jsonData.data.length; i++){",
															"    var expectedSortedOrder = sort.orderBy(jsonData.data, ['id'], ['asc']);",
															"    pm.expect(jsonData.data).to.eql(expectedSortedOrder); ",
															"    array_id.push(jsonData.data[i].id);",
															"        }",
															"    console.log(array_id);",
															"    }",
															"  }",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{dev}}/v1/selfemploymentHistory",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"selfemploymentHistory"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Update self employed history",
									"item": [
										{
											"name": "Update self employed history",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6733a4d8-2ff1-4753-84b9-e67560013238",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Self Employment Updated Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Self Employment Updated Successfully.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.update_self_emply_history);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Self Employment history for User\", function () {",
															"    var data =(pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"    if(jsonData.data.length > 0) {",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));",
															"      array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "employer",
															"value": "Dev Works",
															"type": "text"
														},
														{
															"key": "position",
															"value": "CEO",
															"type": "text"
														},
														{
															"key": "abn_number",
															"value": "51 824 753 556",
															"type": "text"
														},
														{
															"key": "acn_number",
															"value": "51 824 753 556",
															"type": "text"
														},
														{
															"key": "salary",
															"value": "200000",
															"type": "text"
														},
														{
															"key": "start_date",
															"value": "2016-06-01",
															"type": "text"
														},
														{
															"key": "end_date",
															"value": "2019-12-31",
															"type": "text"
														},
														{
															"key": "current",
															"value": "0",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/selfemploymentHistory/{{self-employed_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"selfemploymentHistory",
														"{{self-employed_id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete self employed history",
									"item": [
										{
											"name": "Delete self employment History",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "27a465f8-5dd2-4a5c-8af2-6ddfd7f71a26",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Self Employment Deleted Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.be.oneOf([\"Self Employment Deleted Successfully.\", \"No Such Self Employment Exist.\"]);",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{dev}}/v1/selfemploymentHistory/{{self-employed_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"selfemploymentHistory",
														"{{self-employed_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "If self employment id does not exist",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "27a465f8-5dd2-4a5c-8af2-6ddfd7f71a26",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Success message : No Such Self Employment Exist.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"No Such Self Employment Exist.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.existing_email);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{dev}}/v1/selfemploymentHistory/{{self-employed_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"selfemploymentHistory",
														"{{self-employed_id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "If  self employment history does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f287f608-5394-466f-8b9e-d890e7de834e",
												"exec": [
													"pm.test(\"Status code is 200 or OK\", function() {",
													"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Success status : 200\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"200\");",
													"});",
													"",
													"pm.test(\"Success message : Success\", function() {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"No data Found\");",
													"});",
													"",
													"    pm.test(\"JSON schema validation\", function() {    ",
													"    var schema = JSON.parse(environment.existing_email);",
													"    var jsonData = JSON.parse(responseBody);",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});",
													"",
													"    pm.test(\"JSON data is empty\", function () {",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tenant_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{dev}}/v1/selfemploymentHistory",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"selfemploymentHistory"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Investment property",
							"item": [
								{
									"name": "Add investment property",
									"item": [
										{
											"name": "Add investment property",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f959132d-9481-42ce-8cef-95c9b15aa4f3",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Investment Property Added Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Investment Property Added Successfully.\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.environment.set(\"investment_pro_id\", jsonData.data.id);",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.add_invst_prop);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Self employed history for User\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(pm.environment.get(\"tenant_id\"));",
															"      console.log(jsonData.data[i].user_id);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "property_address",
															"value": "Ramehswar Nagar",
															"type": "text"
														},
														{
															"key": "agency_name",
															"value": "Dev Rental agency",
															"type": "text"
														},
														{
															"key": "rent_per_week",
															"value": "5000",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/investmentProperty",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"investmentProperty"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant does not enter required field",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f959132d-9481-42ce-8cef-95c9b15aa4f3",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Error message : Error\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Error\");",
															"});",
															"",
															"pm.test(\"Error message : The property address field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.property_address[0]).to.eql(\"The property address field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The agency name field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.agency_name[0]).to.eql(\"The agency name field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The rent per week field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.rent_per_week[0]).to.eql(\"The rent per week field is required.\");",
															"});",
															"",
															"var schema =",
															"{",
															"  \"type\": \"object\",",
															"  \"properties\": {",
															"    \"status\": {",
															"      \"type\": \"string\"",
															"    },",
															"    \"messages\": {",
															"      \"type\": \"string\"",
															"    },",
															"    \"data\": {",
															"      \"type\": \"object\",",
															"      \"properties\": {",
															"        \"property_address\": {",
															"          \"type\": \"array\",",
															"          \"items\": [",
															"            {",
															"              \"type\": \"string\"",
															"            }",
															"          ]",
															"        },",
															"        \"agency_name\": {",
															"          \"type\": \"array\",",
															"          \"items\": [",
															"            {",
															"              \"type\": \"string\"",
															"            }",
															"          ]",
															"        },",
															"        \"rent_per_week\": {",
															"          \"type\": \"array\",",
															"          \"items\": [",
															"            {",
															"              \"type\": \"string\"",
															"            }",
															"          ]",
															"        }",
															"      },",
															"      \"required\": [",
															"        \"property_address\",",
															"        \"agency_name\",",
															"        \"rent_per_week\"",
															"      ]",
															"    }",
															"  },",
															"  \"required\": [",
															"    \"status\",",
															"    \"messages\",",
															"    \"data\"",
															"  ]",
															"};",
															"",
															"    pm.test(\"JSON schema validation\", function() {",
															"    var jsonData = pm.response.json();",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Investment Property history for User\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(pm.environment.get(\"tenant_id\"));",
															"      console.log(jsonData.data[i].user_id);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "property_address",
															"value": "",
															"type": "text"
														},
														{
															"key": "agency_name",
															"value": "",
															"type": "text"
														},
														{
															"key": "rent_per_week",
															"value": "",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/investmentProperty",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"investmentProperty"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Get investment property list",
									"item": [
										{
											"name": "Get investment property list",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d0dc29ca-bf2b-40fa-beee-bc1e8fd73b09",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {\r",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Success status : 200\", function () \r",
															"{\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"200\");\r",
															"});\r",
															"\r",
															"pm.test(\"Success message : Success\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.messages).to.be.oneOf([\"Success\", \"No data Found\"]);\r",
															"});\r",
															"\r",
															"    pm.test(\"JSON schema validation\", function() {    \r",
															"    var schema = JSON.parse(environment.get_invst_prop);\r",
															"    var jsonData = JSON.parse(responseBody);\r",
															"    var result = tv4.validate(jsonData, schema, false, true);\r",
															"    if (result !== true) {\r",
															"        console.log('Schema validation failed:', tv4.error);\r",
															"        console.log(tv4.error.dataPath);\r",
															"    }\r",
															"    pm.expect(result).to.be.true;\r",
															"});\r",
															"\r",
															"    pm.test(\"Employment history for User\", function () {\r",
															"    var data =(pm.environment.get(\"tenant_id\"));\r",
															"    var jsonData = JSON.parse(responseBody);\r",
															"    if(jsonData.data.length > 0) {\r",
															"    array_tenant_id = [];\r",
															"    for(i=0; i<jsonData.data.length; i++){\r",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));\r",
															"      array_tenant_id.push(jsonData.data[i].user_id);\r",
															"    }\r",
															"    console.log(array_tenant_id);\r",
															"    }\r",
															"});\r",
															"\r",
															"    var sort = require('lodash');\r",
															"    var jsonData = JSON.parse(responseBody);\r",
															"    pm.test('Data are in sorted order', function () {\r",
															"        array_id = [];\r",
															"        for(i=0; i<jsonData.data.length; i++){\r",
															"    var expectedSortedOrder = sort.orderBy(jsonData.data, ['id'],['asc']);\r",
															"    pm.expect(jsonData.data).to.eql(expectedSortedOrder); \r",
															"    array_id.push(jsonData.data[i].id);\r",
															"        }\r",
															"    console.log(array_id);\r",
															"    }\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{dev}}/v1/investmentProperty",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"investmentProperty"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Update investment property",
									"item": [
										{
											"name": "Update investment property",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a35ea6bc-074a-4f9a-b2e1-bea8e66e8afc",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Investment Property Updated Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Investment Property Updated Successfully.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.update_invst_prop);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Employment history for User\", function () {",
															"    var data =(pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"    if(jsonData.data.length > 0) {",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));",
															"      array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "property_address",
															"value": "403, Bharat Kunj apts, Near amrapali apts, beside Atithi hall street, Bodakdev",
															"type": "text"
														},
														{
															"key": "agency_name",
															"value": "Jain services",
															"type": "text"
														},
														{
															"key": "rent_per_week",
															"value": "6000",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/investmentProperty/{{investment_pro_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"investmentProperty",
														"{{investment_pro_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "If tenant does not enter required field",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a35ea6bc-074a-4f9a-b2e1-bea8e66e8afc",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Error message : Error\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Error\");",
															"});",
															"",
															"pm.test(\"Error message : The property address field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.property_address[0]).to.eql(\"The property address field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The agency name field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.agency_name[0]).to.eql(\"The agency name field is required.\");",
															"});",
															"",
															"pm.test(\"Error message : The rent per week field is required.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data.rent_per_week[0]).to.eql(\"The rent per week field is required.\");",
															"});",
															"",
															"var schema =",
															"{",
															"  \"type\": \"object\",",
															"  \"properties\": {",
															"    \"status\": {",
															"      \"type\": \"string\"",
															"    },",
															"    \"messages\": {",
															"      \"type\": \"string\"",
															"    },",
															"    \"data\": {",
															"      \"type\": \"object\",",
															"      \"properties\": {",
															"        \"property_address\": {",
															"          \"type\": \"array\",",
															"          \"items\": [",
															"            {",
															"              \"type\": \"string\"",
															"            }",
															"          ]",
															"        },",
															"        \"agency_name\": {",
															"          \"type\": \"array\",",
															"          \"items\": [",
															"            {",
															"              \"type\": \"string\"",
															"            }",
															"          ]",
															"        },",
															"        \"rent_per_week\": {",
															"          \"type\": \"array\",",
															"          \"items\": [",
															"            {",
															"              \"type\": \"string\"",
															"            }",
															"          ]",
															"        }",
															"      },",
															"      \"required\": [",
															"        \"property_address\",",
															"        \"agency_name\",",
															"        \"rent_per_week\"",
															"      ]",
															"    }",
															"  },",
															"  \"required\": [",
															"    \"status\",",
															"    \"messages\",",
															"    \"data\"",
															"  ]",
															"};",
															"",
															"    pm.test(\"JSON schema validation\", function() {",
															"    var jsonData = pm.response.json();",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "property_address",
															"value": "",
															"type": "text"
														},
														{
															"key": "agency_name",
															"value": "",
															"type": "text"
														},
														{
															"key": "rent",
															"value": "",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/investmentProperty/{{investment_pro_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"investmentProperty",
														"{{investment_pro_id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete investment property",
									"item": [
										{
											"name": "Delete investment Property",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d29ede44-bced-4d49-93d8-321d9d903a71",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {\r",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Success status : 200\", function () \r",
															"{\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"200\");\r",
															"});\r",
															"\r",
															"pm.test(\"Success message : Investment Property Deleted Successfully.\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.messages).to.eql(\"Investment Property Deleted Successfully.\");\r",
															"});\r",
															"\r",
															"    pm.test(\"JSON schema validation\", function() {    \r",
															"    var schema = JSON.parse(environment.get_invst_prop);\r",
															"    var jsonData = JSON.parse(responseBody);\r",
															"    var result = tv4.validate(jsonData, schema, false, true);\r",
															"    if (result !== true) {\r",
															"        console.log('Schema validation failed:', tv4.error);\r",
															"        console.log(tv4.error.dataPath);\r",
															"    }\r",
															"    pm.expect(result).to.be.true;\r",
															"});\r",
															"\r",
															"    pm.test(\"Employment history for User\", function () {\r",
															"    var data =(pm.environment.get(\"tenant_id\"));\r",
															"    var jsonData = JSON.parse(responseBody);\r",
															"    if(jsonData.data.length > 0) {\r",
															"    array_tenant_id = [];\r",
															"    for(i=0; i<jsonData.data.length; i++){\r",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));\r",
															"      array_tenant_id.push(jsonData.data[i].user_id);\r",
															"    }\r",
															"    console.log(array_tenant_id);\r",
															"    }\r",
															"});\r",
															"\r",
															"    pm.test(\"JSON data is empty\", function () {\r",
															"    var jsonData = JSON.parse(responseBody);\r",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;\r",
															"});\r",
															"\r",
															"    var sort = require('lodash');\r",
															"    var jsonData = JSON.parse(responseBody);\r",
															"    pm.test('Data are in sorted order', function () {\r",
															"        array_id = [];\r",
															"        for(i=0; i<jsonData.data.length; i++){\r",
															"    var expectedSortedOrder = sort.orderBy(jsonData.data, ['id'],['asc']);\r",
															"    pm.expect(jsonData.data).to.eql(expectedSortedOrder); \r",
															"    array_id.push(jsonData.data[i].id);\r",
															"        }\r",
															"    console.log(array_id);\r",
															"    }\r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{dev}}/v1/investmentProperty/{{investment_pro_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"investmentProperty",
														"{{investment_pro_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "If investment property id does not exist",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d29ede44-bced-4d49-93d8-321d9d903a71",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {\r",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Success status : 400\", function () \r",
															"{\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.status).to.eql(\"400\");\r",
															"});\r",
															"\r",
															"pm.test(\"Success message : No Such Investment Property Exist.\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.messages).to.eql(\"No Such Investment Property Exist.\");\r",
															"});\r",
															"\r",
															"var schema = \r",
															"{\r",
															"  \"type\": \"object\",\r",
															"  \"properties\": {\r",
															"    \"status\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"messages\": {\r",
															"      \"type\": \"string\"\r",
															"    },\r",
															"    \"data\": {\r",
															"      \"type\": \"array\",\r",
															"      \"items\": {}\r",
															"    }\r",
															"  },\r",
															"  \"required\": [\r",
															"    \"status\",\r",
															"    \"messages\",\r",
															"    \"data\"\r",
															"  ]\r",
															"};\r",
															"\r",
															"    pm.test(\"JSON schema validation\", function() {\r",
															"    var jsonData = pm.response.json();\r",
															"    var result = tv4.validate(jsonData, schema, false, true);\r",
															"    if (result !== true) {\r",
															"        console.log('Schema validation failed:', tv4.error);\r",
															"        console.log(tv4.error.dataPath);\r",
															"    }\r",
															"    pm.expect(result).to.be.true;\r",
															"});\r",
															"\r",
															"    pm.test(\"JSON data is empty\", function () {\r",
															"    var jsonData = JSON.parse(responseBody);\r",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{dev}}/v1/investmentProperty/{{investment_pro_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"investmentProperty",
														"{{investment_pro_id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "If investment property does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0dc29ca-bf2b-40fa-beee-bc1e8fd73b09",
												"exec": [
													"pm.test(\"Status code is 200 or OK\", function() {\r",
													"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Success status : 200\", function () \r",
													"{\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.status).to.eql(\"200\");\r",
													"});\r",
													"\r",
													"pm.test(\"Success message : No data Found\", function() {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.messages).to.eql(\"No data Found\");\r",
													"});\r",
													"\r",
													"var schema =\r",
													"{\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"status\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"messages\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"data\": {\r",
													"      \"type\": \"array\",\r",
													"      \"items\": {}\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"status\",\r",
													"    \"messages\",\r",
													"    \"data\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"    pm.test(\"JSON schema validation\", function() {\r",
													"    var jsonData = pm.response.json();\r",
													"    var result = tv4.validate(jsonData, schema, false, true);\r",
													"    if (result !== true) {\r",
													"        console.log('Schema validation failed:', tv4.error);\r",
													"        console.log(tv4.error.dataPath);\r",
													"    }\r",
													"    pm.expect(result).to.be.true;\r",
													"});\r",
													"\r",
													"    pm.test(\"JSON data is empty\", function () {\r",
													"    var jsonData = JSON.parse(responseBody);\r",
													"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tenant_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{dev}}/v1/investmentProperty",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"investmentProperty"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "75cac103-896a-4016-8e0a-1e8dafe186b4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "83f4695c-ffab-4083-b458-ec650d746845",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Supporting documents",
							"item": [
								{
									"name": "Get documents categories",
									"item": [
										{
											"name": "Get document categories",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ea503d9a-e940-466b-a62a-0c3b0d361184",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Success\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Success\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.get_doc_category);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{dev}}/v1/getDocumentCategory",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"getDocumentCategory"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Add supporting documents",
									"item": [
										{
											"name": "Add supporting documents",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "272b150e-8e97-4f35-bd88-42bc8be456ed",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Document Uploaded Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Document Uploaded Successfully.\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.environment.set(\"supporting_doc_id\", jsonData.data.id);",
															"",
															"   pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.add_doc);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Supporting documents for User\", function () {",
															"    var data =(pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"    if(jsonData.data.length > 0) {",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));",
															"      array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "document",
															"type": "file",
															"src": "./tests/qa.png"
														},
														{
															"key": "document_category_id",
															"value": "1",
															"description": "1-Primary,2-Secondary,3-Proof of Income,4-Proof of Renting",
															"type": "text"
														},
														{
															"key": "document_type_id",
															"value": "2",
															"description": "1-Driving Licence - 1\n2-Passport - 1\n3-Birth Certificate - 2\n4-Student Card - 2\n5-Medicare Card - 2\n6-Health Care Card - 2\n7-Vehicle Registration - 2\n8-Pay Slip - 3\n9-Rental Receipts - 4\n10-Utillity Bills - 4\n11-Bank Statement - 4\n12-Rental Reference - 4",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/supportingDocuments",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"supportingDocuments"
													]
												}
											},
											"response": []
										},
										{
											"name": "If supporting document is already added",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "272b150e-8e97-4f35-bd88-42bc8be456ed",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Error message : You have already uploaded this document.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"You have already uploaded this document.\");",
															"});",
															"",
															"var schema = ",
															"{",
															"  \"type\": \"object\",",
															"  \"properties\": {",
															"    \"status\": {",
															"      \"type\": \"string\"",
															"    },",
															"    \"messages\": {",
															"      \"type\": \"string\"",
															"    },",
															"    \"data\": {",
															"      \"type\": \"array\",",
															"      \"items\": {}",
															"    }",
															"  },",
															"  \"required\": [",
															"    \"status\",",
															"    \"messages\",",
															"    \"data\"",
															"  ]",
															"};",
															"",
															"    pm.test(\"JSON schema validation\", function() {",
															"    var jsonData = pm.response.json();",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "document",
															"type": "file",
															"src": "./tests/qa.png"
														},
														{
															"key": "document_category_id",
															"value": "{{document_category_id}}",
															"description": "1-Primary,2-Secondary,3-Proof of Income,4-Proof of Renting",
															"type": "text"
														},
														{
															"key": "document_type_id",
															"value": "{{document_type_id}}",
															"description": "1-Driving Licence - 1\n2-Passport - 1\n3-Birth Certificate - 2\n4-Student Card - 2\n5-Medicare Card - 2\n6-Health Care Card - 2\n7-Vehicle Registration - 2\n8-Pay Slip - 3\n9-Rental Receipts - 4\n10-Utillity Bills - 4\n11-Bank Statement - 4\n12-Rental Reference - 4",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/supportingDocuments",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"supportingDocuments"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Get all supporting documents",
									"item": [
										{
											"name": "Get all supporting documents",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "940edfae-c3e9-425b-aec6-1dfddc74deb6",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Success\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Success\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.get_doc);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Supporting documents for User\", function () {",
															"    var data =(pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"    if(jsonData.data.length > 0) {",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));",
															"      array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{dev}}/v1/supportingDocuments",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"supportingDocuments"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete supporting document",
									"item": [
										{
											"name": "Delete supporting document",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ffa9c1a0-e492-4716-a50e-a122162868d4",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Document Deleted Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Document Deleted Successfully.\");",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.delete);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{dev}}/v1/supportingDocuments/{{supporting_doc_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"supportingDocuments",
														"{{supporting_doc_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "If supporting document id does not exist",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ffa9c1a0-e492-4716-a50e-a122162868d4",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : No Such Document Exist.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"No Such Document Exist.\");",
															"});",
															"",
															"var schema = ",
															"{",
															"  \"type\": \"object\",",
															"  \"properties\": {",
															"    \"status\": {",
															"      \"type\": \"string\"",
															"    },",
															"    \"messages\": {",
															"      \"type\": \"string\"",
															"    },",
															"    \"data\": {",
															"      \"type\": \"array\",",
															"      \"items\": {}",
															"    }",
															"  },",
															"  \"required\": [",
															"    \"status\",",
															"    \"messages\",",
															"    \"data\"",
															"  ]",
															"};",
															"",
															"    pm.test(\"JSON schema validation\", function() {",
															"    var jsonData = pm.response.json();",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{dev}}/v1/supportingDocuments/{{supporting_doc_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"supportingDocuments",
														"{{supporting_doc_id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "If supporting documents does not exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "940edfae-c3e9-425b-aec6-1dfddc74deb6",
												"exec": [
													"pm.test(\"Status code is 200 or OK\", function() {",
													"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Success status : 200\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"200\");",
													"});",
													"",
													"pm.test(\"Success message : No Supporting documents Found\", function() {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"No Supporting documents Found\");",
													"});",
													"",
													"var schema =",
													"{",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"status\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"messages\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"data\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    }",
													"  },",
													"  \"required\": [",
													"    \"status\",",
													"    \"messages\",",
													"    \"data\"",
													"  ]",
													"};",
													"",
													"    pm.test(\"JSON schema validation\", function() {",
													"    var jsonData = pm.response.json();",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});",
													"",
													"    pm.test(\"JSON data is blank array\");",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tenant_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{dev}}/v1/supportingDocuments",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"supportingDocuments"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a72f4c2a-8c49-4356-86ff-5604a1300c28",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "21b20ea8-c20a-4c4e-a9e4-a16074f8aa52",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Tenant application",
							"item": [
								{
									"name": "Create tenant application",
									"item": [
										{
											"name": "Create tenant application",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7e1e6e9f-e29c-400a-b3fe-4392ab996f4a",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Tenant Application Added Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Tenant Application Added Successfully.\");",
															"});",
															"",
															"//     pm.test(\"JSON schema validation\", function() {    ",
															"//     var schema = JSON.parse(environment.add);",
															"//     var jsonData = JSON.parse(responseBody);",
															"//     var result = tv4.validate(jsonData, schema, false, true);",
															"//     if (result !== true) {",
															"//         console.log('Schema validation failed:', tv4.error);",
															"//         console.log(tv4.error.dataPath);",
															"//     }",
															"//     pm.expect(result).to.be.true;",
															"// });",
															"",
															"    pm.test(\"Tenant application for User\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(pm.environment.get(\"tenant_id\"));",
															"      console.log(jsonData.data[i].user_id);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}",
														"description": "Bearer {{FB_tenant_token}}"
													},
													{
														"key": "Origin",
														"value": "file://",
														"type": "text"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ideal_lease_start_date",
															"value": "2020-07-12",
															"type": "text"
														},
														{
															"key": "rent",
															"value": "200",
															"type": "text"
														},
														{
															"key": "ideal_lease_month_length",
															"value": "18",
															"type": "text"
														},
														{
															"key": "property_inspected",
															"value": "1",
															"type": "text"
														},
														{
															"key": "agency_name",
															"value": "TRT",
															"type": "text"
														},
														{
															"key": "pm_email",
															"value": "janvib@thirdrocktechkno.com",
															"type": "text"
														},
														{
															"key": "street_number",
															"value": "22/890",
															"type": "text"
														},
														{
															"key": "street_name",
															"value": "Warrwick rd",
															"type": "text"
														},
														{
															"key": "suburb",
															"value": "Churchill ",
															"type": "text"
														},
														{
															"key": "postcode",
															"value": "4030",
															"type": "text"
														},
														{
															"key": "sub_premise",
															"value": "",
															"type": "text"
														},
														{
															"key": "state",
															"value": "",
															"type": "text"
														},
														{
															"key": "country",
															"value": "",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/tenantApplication",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"tenantApplication"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add co-occupant Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "131a022d-ce11-486c-bd56-dc389202f319",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Co-occupant Added Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Co-occupant Added Successfully.\");",
															"        console.log(jsonData.data.agency_email);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"pm.environment.set(\"co-occupant_id\", jsonData.data.id);",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.add_cooccupant);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"Co-occupant for User\", function () {",
															"    var data =(pm.environment.get(\"tenant_id\"));",
															"    var jsonData = JSON.parse(responseBody);",
															"    if(jsonData.data.length > 0) {",
															"    array_tenant_id = [];",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(parseInt(data));",
															"      array_tenant_id.push(jsonData.data[i].user_id);",
															"    }",
															"    console.log(array_tenant_id);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "firstname",
															"value": "das",
															"type": "text"
														},
														{
															"key": "lastname",
															"value": "Parmar",
															"type": "text"
														},
														{
															"key": "email",
															"value": "{{co-occupant_email}}",
															"type": "text"
														},
														{
															"key": "age",
															"value": "23",
															"type": "text"
														},
														{
															"key": "phonenumber",
															"value": "+61741247874",
															"type": "text"
														},
														{
															"key": "relationship",
															"value": "Friend",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/cooccupants",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"cooccupants"
													]
												}
											},
											"response": [
												{
													"name": "Co-occupant Request",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImVhOTkwNzM2YzM3MTEzZjQ4Y2RiMGRkYzQxMWEzMDcxZTI3ZDAyMjJjODc5NWQzZTg1Y2ZjMjU2OWEzMzdmNWE5MjVjMTg4NzQ3YjIyNGEwIn0.eyJhdWQiOiIxIiwianRpIjoiZWE5OTA3MzZjMzcxMTNmNDhjZGIwZGRjNDExYTMwNzFlMjdkMDIyMmM4Nzk1ZDNlODVjZmMyNTY5YTMzN2Y1YTkyNWMxODg3NDdiMjI0YTAiLCJpYXQiOjE1MzY1ODM1OTIsIm5iZiI6MTUzNjU4MzU5MiwiZXhwIjoxNTY4MTE5NTkyLCJzdWIiOiIxIiwic2NvcGVzIjpbImRhc2hib2FyZC1hY2Nlc3MiXX0.iXjkC_UuIrjOvISRfZMZEyib-vlfVj8OM7NygzfsK4T2tGfsJnsvLIiJcmSVzoWt4kOxtkJfPZr-gvhTBvJUO7Cbb24tQ5NWzCta8pcSYFBOFzmm0aG2DhIcvrNDkVf8ocDMHKr7kUO47r9GVy-aSY66nQHJDNOdGCHyozauOXVi-9SLV4b4-XEcKMyuJSyuH-sxrnfKMM9PZS2vU2FmjT_pfR3uDSqoJhSIo_mKrr1E68nGwKQLK4i0qWe8g9D8Qphp2TklbWfDbLCl8LUMS-QkUIysC3RkyHQrJmjuzoPvdoAJw6QgqXbmnm7B-HpwhEO6-ERDNU0ShJlxvXYUz5EJ4FUIvkSElmJqVcNniP7P3H0FFoQm9-xodK-2tkncv8ObXNk7fLsgPl0xN0XWLIfce6I925cpUpjV0KZnJ9S0YZEulOWoJX76531NTKh_rcg2TiBzY_ep0Q9bhcejeEA5qeMpQU8aozSxV_zz2zY3rU3r4nq0h9eQRIjxAAobJbyXG-VVPY-q2QkAK6CEeRT4xodJILsZKgHa9WZq9odgg48QmXt_orO38uN9vz3vbyczULBxJrypPAhPxWkN-tyVlZs-9BCwGRscXdwDeO2_48gsWcNywGoNr3Q6LdSJFYAsCAmkUN_kVheW-HAwBfYjVjwV0MVIiRUDrHjzY-8",
																"warning": ""
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "firstname",
																	"value": "Test5",
																	"type": "text"
																},
																{
																	"key": "lastname",
																	"value": "User5",
																	"type": "text"
																},
																{
																	"key": "email",
																	"value": "developer+9999999@thirdrocktechkno.com",
																	"type": "text"
																},
																{
																	"key": "phonenumber",
																	"value": "6574124787",
																	"type": "text"
																},
																{
																	"key": "relationship",
																	"value": "Friend",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "http://27.109.15.190:8088/v1/cooccupants",
															"protocol": "http",
															"host": [
																"27",
																"109",
																"15",
																"190"
															],
															"port": "8088",
															"path": [
																"v1",
																"cooccupants"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "access-control-allow-credentials",
															"value": "1",
															"name": "access-control-allow-credentials",
															"description": ""
														},
														{
															"key": "access-control-allow-headers",
															"value": "*",
															"name": "access-control-allow-headers",
															"description": ""
														},
														{
															"key": "access-control-allow-methods",
															"value": "GET, POST, PUT, DELETE, OPTIONS",
															"name": "access-control-allow-methods",
															"description": ""
														},
														{
															"key": "access-control-allow-origin",
															"value": "*",
															"name": "access-control-allow-origin",
															"description": ""
														},
														{
															"key": "cache-control",
															"value": "no-cache, private",
															"name": "cache-control",
															"description": ""
														},
														{
															"key": "connection",
															"value": "keep-alive",
															"name": "connection",
															"description": ""
														},
														{
															"key": "content-type",
															"value": "application/json",
															"name": "content-type",
															"description": ""
														},
														{
															"key": "date",
															"value": "Mon, 10 Sep 2018 12:48:26 GMT",
															"name": "date",
															"description": ""
														},
														{
															"key": "server",
															"value": "nginx/1.13.12",
															"name": "server",
															"description": ""
														},
														{
															"key": "transfer-encoding",
															"value": "chunked",
															"name": "transfer-encoding",
															"description": ""
														},
														{
															"key": "x-powered-by",
															"value": "PHP/7.2.3",
															"name": "x-powered-by",
															"description": ""
														},
														{
															"key": "x-ratelimit-limit",
															"value": "60",
															"name": "x-ratelimit-limit",
															"description": ""
														},
														{
															"key": "x-ratelimit-remaining",
															"value": "59",
															"name": "x-ratelimit-remaining",
															"description": ""
														}
													],
													"cookie": [],
													"body": "{\"status\":\"200\",\"messages\":\"Co-occupant Added Successfully.\",\"data\":{\"id\":54,\"firstname\":\"Test5\",\"lastname\":\"User5\",\"email\":\"developer+9999999@thirdrocktechkno.com\",\"age\":null,\"phonenumber\":\"6574124787\",\"relationship\":\"Friend\",\"user_id\":1,\"created_at\":\"2018-09-10 22:48:25\",\"updated_at\":\"2018-09-10 22:48:25\",\"user\":{\"id\":1,\"first_name\":\"Rahul\",\"last_name\":\"Riddhi\",\"email\":\"developer@thirdrocktechkno.com\",\"phone\":\"9687457485\",\"age\":\"26\",\"created_at\":\"2018-05-17 16:18:58\",\"updated_at\":\"2018-06-25 22:14:19\",\"pm\":0}}}"
												}
											]
										},
										{
											"name": "If any of co-occupants is not registered",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7e1e6e9f-e29c-400a-b3fe-4392ab996f4a",
														"exec": [
															"pm.test(\"Status code is 400 or Bad Request\", function() {",
															"    pm.response.to.have.status(400) || pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"pm.test(\"Success status : 400\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"400\");",
															"});",
															"",
															"pm.test(\"Success message : You can not submit application as all your co-occupants has not signed up yet.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"You can not submit application as all your co-occupants has not signed up yet.\");",
															"});",
															"",
															"var schema = ",
															"{",
															"  \"type\": \"object\",",
															"  \"properties\": {",
															"    \"status\": {",
															"      \"type\": \"string\"",
															"    },",
															"    \"messages\": {",
															"      \"type\": \"string\"",
															"    },",
															"    \"data\": {",
															"      \"type\": \"array\",",
															"      \"items\": {}",
															"    }",
															"  },",
															"  \"required\": [",
															"    \"status\",",
															"    \"messages\",",
															"    \"data\"",
															"  ]",
															"};",
															"",
															"    pm.test(\"JSON schema validation\", function() {",
															"    var jsonData = pm.response.json();",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													},
													{
														"key": "Origin",
														"type": "text",
														"value": "file://"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "ideal_lease_start_date",
															"value": "2018-07-01",
															"type": "text"
														},
														{
															"key": "rent",
															"value": "1200",
															"type": "text"
														},
														{
															"key": "ideal_lease_month_length",
															"value": "6",
															"type": "text"
														},
														{
															"key": "property_inspected",
															"value": "1",
															"type": "text"
														},
														{
															"key": "agency_name",
															"value": "RIM RIM Agency",
															"type": "text"
														},
														{
															"key": "pm_email",
															"value": "Mckeillor.manawatu@griffithuni.edu",
															"type": "text"
														},
														{
															"key": "street_number",
															"value": "5",
															"type": "text"
														},
														{
															"key": "street_name",
															"value": "dsdsds",
															"type": "text"
														},
														{
															"key": "suburb",
															"value": "4dsdsdsfdsf",
															"type": "text"
														},
														{
															"key": "postcode",
															"value": "4789",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{dev}}/v1/tenantApplication",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"tenantApplication"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Co-occupant Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2e821a51-44f8-4ff0-92b3-bed8bb472d67",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Co-occupant Deleted Successfully.\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.be.oneOf([\"Co-occupant Deleted Successfully.\", \"No such Co-occupant exist.\"]);",
															"        console.log(jsonData.data.agency_email);",
															"});",
															"",
															"    pm.test(\"JSON schema validation\", function() {    ",
															"    var schema = JSON.parse(environment.delete);",
															"    var jsonData = JSON.parse(responseBody);",
															"    var result = tv4.validate(jsonData, schema, false, true);",
															"    if (result !== true) {",
															"        console.log('Schema validation failed:', tv4.error);",
															"        console.log(tv4.error.dataPath);",
															"    }",
															"    pm.expect(result).to.be.true;",
															"});",
															"",
															"    pm.test(\"JSON data is empty\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {},
												"url": {
													"raw": "{{dev}}/v1/deleteCooccupants/{{co-occupant_id}}",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"deleteCooccupants",
														"{{co-occupant_id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Get tenant application list",
									"item": [
										{
											"name": "Get all tenant application list",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "62248da3-1027-4dff-842c-9d290bfa5e7a",
														"exec": [
															"pm.test(\"Status code is 200 or OK\", function() {",
															"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Success status : 200\", function () ",
															"{",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.status).to.eql(\"200\");",
															"});",
															"",
															"pm.test(\"Success message : Success\", function() {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.messages).to.eql(\"Success\");",
															"});",
															"",
															"//     pm.test(\"JSON schema validation\", function() {    ",
															"//     var schema = JSON.parse(environment.tenant_application);",
															"//     var jsonData = JSON.parse(responseBody);",
															"//     var result = tv4.validate(jsonData, schema, false, true);",
															"//     if (result !== true) {",
															"//         console.log('Schema validation failed:', tv4.error);",
															"//         console.log(tv4.error.dataPath);",
															"//     }",
															"//     pm.expect(result).to.be.true;",
															"// });",
															"",
															"    pm.test(\"Tenant application for User\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    for(i=0; i<jsonData.data.length; i++){",
															"        pm.expect(jsonData.data[i].user_id).to.eql(pm.environment.get(\"tenant_id\"));",
															"      console.log(jsonData.data[i].user_id);",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{tenant_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{dev}}/v1/tenantApplication",
													"host": [
														"{{dev}}"
													],
													"path": [
														"v1",
														"tenantApplication"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "If tenant application does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62248da3-1027-4dff-842c-9d290bfa5e7a",
												"exec": [
													"pm.test(\"Status code is 200 or OK\", function() {",
													"    pm.response.to.have.status(200) || pm.response.to.have.status(\"OK\");",
													"});",
													"",
													"pm.test(\"Success status : 200\", function () ",
													"{",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"200\");",
													"});",
													"",
													"pm.test(\"Success message : No data Found\", function() {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.messages).to.eql(\"No data Found\");",
													"});",
													"",
													"var schema =",
													"{",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"status\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"messages\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"data\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    }",
													"  },",
													"  \"required\": [",
													"    \"status\",",
													"    \"messages\",",
													"    \"data\"",
													"  ]",
													"};",
													"",
													"    pm.test(\"JSON schema validation\", function() {",
													"    var jsonData = pm.response.json();",
													"    var result = tv4.validate(jsonData, schema, false, true);",
													"    if (result !== true) {",
													"        console.log('Schema validation failed:', tv4.error);",
													"        console.log(tv4.error.dataPath);",
													"    }",
													"    pm.expect(result).to.be.true;",
													"});",
													"",
													"    pm.test(\"JSON data is empty\", function () {",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
													"});",
													"",
													"    postman.setNextRequest(null);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{tenant_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{dev}}/v1/tenantApplication",
											"host": [
												"{{dev}}"
											],
											"path": [
												"v1",
												"tenantApplication"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c5d8cb17-0291-46b3-89f9-f096521e59de",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a458842a-f36f-4d0b-8dfd-45598b3efd59",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "5a33d85c-73a8-4c6b-8cf2-c0963af7d8f7",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0acaeda7-2c31-4b75-933c-6f06c8cf0f38",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}